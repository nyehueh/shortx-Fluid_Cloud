{
  "facts": [{
    "@type": "type.googleapis.com/ClipboardContentChanged",
    "tag": "剪切板",
    "customContextDataKey": {
    },
    "id": "F-d845334e-e574-4702-a1b8-e056f89bce96"
  }, {
    "@type": "type.googleapis.com/OnMenuActionTrigger",
    "tag": "选中",
    "customContextDataKey": {
    },
    "id": "F-1dd8aa7a-42cb-4b7e-a158-2dfff6e4c8af"
  }, {
    "@type": "type.googleapis.com/ActivityStarted",
    "components": [{
      "pkg": {
        "pkgName": "com.tencent.mobileqq"
      },
      "className": "com.tencent.mobileqq.activity.QQBrowserActivity"
    }],
    "tag": "QQ",
    "customContextDataKey": {
    },
    "id": "F-de561656-8466-49cb-8b73-bfdf6acf417a"
  }, {
    "@type": "type.googleapis.com/ActivityStarted",
    "components": [{
      "pkg": {
        "pkgName": "com.tencent.mm"
      },
      "className": "com.tencent.mm.plugin.webview.ui.tools.MMWebViewUI"
    }],
    "tag": "微信",
    "customContextDataKey": {
    },
    "id": "F-5ccccc1e-42ea-4563-ae81-d9ff8d66d08f"
  }, {
    "@type": "type.googleapis.com/Broadcast",
    "actions": ["com.nyehueh.fluidcloud.ACTION_URL_RECEIVED"],
    "tag": "附加",
    "customContextDataKey": {
    },
    "id": "F-38813cf2-da78-4fb9-80d3-2c616c8f48a8"
  }],
  "actions": [{
    "@type": "type.googleapis.com/SwitchCase",
    "case": [{
      "case": [{
        "@type": "type.googleapis.com/RequireFactTag",
        "tag": "剪切板",
        "customContextDataKey": {
        },
        "id": "C-9bbcfe49-ac59-42ea-8e3d-729708193a1d"
      }],
      "action": [{
        "@type": "type.googleapis.com/ReplaceRegex",
        "string": "{clipboardContent}",
        "regex": "\\{|\\}|`|\\\\",
        "replacement": " ",
        "customContextDataKey": {
        },
        "id": "A-4c8ee740-4d22-4407-9a61-d169e4f38585"
      }],
      "description": "剪切板",
      "id": "Case-ccfa5d78-bcb8-4685-9139-8956c644720b",
      "isBreak": true
    }, {
      "case": [{
        "@type": "type.googleapis.com/RequireFactTag",
        "tag": "选中",
        "customContextDataKey": {
        },
        "id": "C-e346ad10-b180-4332-928d-282c8c7b2afe"
      }],
      "action": [{
        "@type": "type.googleapis.com/ReplaceRegex",
        "string": "{selectedText}",
        "regex": "\\{|\\}|`|\\\\",
        "replacement": " ",
        "customContextDataKey": {
        },
        "id": "A-4c8ee740-4d22-4407-9a61-d169e4f38585"
      }],
      "description": "选中",
      "id": "Case-d5c848e9-70e2-48cb-bc36-13640c4af685",
      "isBreak": true
    }, {
      "case": [{
        "@type": "type.googleapis.com/RequireFactTag",
        "tag": "QQ",
        "customContextDataKey": {
        },
        "id": "C-86cd7c57-a54b-4c20-9e62-bc3121266cfc"
      }],
      "action": [{
        "@type": "type.googleapis.com/ExecuteJS",
        "expression": "var text \u003d activityIntentUri;\nvar pattern \u003d /S.url\u003d(.*?);/;   \nvar match \u003d text.match(pattern);\nif (match) {\n    var result \u003d match[1];  \n    decodeURIComponent(result);\n}else \"nolink\"",
        "customContextDataKey": {
          "keys": [{
            "first": "jsRet",
            "second": "replaceResult"
          }]
        },
        "id": "A-7d834ab6-8b01-4e81-a0d9-002c30d8d2fd"
      }],
      "description": "QQ",
      "id": "Case-05133f5c-8afa-4bee-95bc-a95f26fac9a8",
      "isBreak": true
    }, {
      "case": [{
        "@type": "type.googleapis.com/RequireFactTag",
        "tag": "微信",
        "customContextDataKey": {
        },
        "id": "C-d229e146-e2a7-4bfb-9d11-ea49d01fe14a"
      }],
      "action": [{
        "@type": "type.googleapis.com/ExecuteJS",
        "expression": "var text \u003d activityIntentUri;\nvar pattern \u003d /S.rawUrl\u003d(.*?);/;   \nvar match \u003d text.match(pattern);\nif (match) {\n    var result \u003d match[1];  \n    decodeURIComponent(result);\n}else \"nolink\"",
        "customContextDataKey": {
          "keys": [{
            "first": "jsRet",
            "second": "replaceResult"
          }]
        },
        "id": "A-7d834ab6-8b01-4e81-a0d9-002c30d8d2fd"
      }],
      "description": "微信",
      "id": "Case-75808f47-fa2c-4b57-a09a-23f74fae07f1",
      "isBreak": true
    }, {
      "case": [{
        "@type": "type.googleapis.com/RequireFactTag",
        "tag": "附加",
        "customContextDataKey": {
        },
        "id": "C-0b80e4eb-198c-40af-806b-43b6565c07c5"
      }],
      "action": [{
        "@type": "type.googleapis.com/ExecuteMVEL",
        "expression": "import android.content.Intent;\nimport android.os.Bundle;\nresult \u003d \"\";\nextras \u003d intent.getExtras();\nif (extras !\u003d null) {\n    if (extras.containsKey(\"url\")) {\n        result +\u003d extras.getString(\"url\");\n    }\n} else {\n    result +\u003d \"nolink.\\n\";\n}\nreturn result;",
        "customContextDataKey": {
          "keys": [{
            "first": "mvelRet",
            "second": "replaceResult"
          }]
        },
        "id": "A-fc9074c7-bced-45f7-ab17-a492fe627a2f"
      }],
      "description": "附加",
      "id": "Case-d9abc841-3208-41bc-80d5-58e9733bf64a",
      "isBreak": true
    }],
    "customContextDataKey": {
    },
    "id": "A-de1cbfc6-666e-4d69-b3c7-1b27eed9ca45"
  }, {
    "@type": "type.googleapis.com/ExecuteJS",
    "expression": "function readFileContent(filePath) {\n    var file \u003d new java.io.File(filePath);\n    if (!file.exists()) {\n        throw \"核心文件不存在: \" + filePath;\n    }\n    var scanner \u003d new java.util.Scanner(file, \"UTF-8\").useDelimiter(\"\\\\Z\");\n    var content \u003d scanner.hasNext() ? scanner.next() : \"\";\n    scanner.close();\n    return String(content);\n}\nvar input \u003d replaceResult;\nvar charnum \u003d input.length;\nvar DebugMode \u003d false;\nvar error;\nif (charnum \u003c 1000) {\n    try{\n        function findRandomDirWithPrefix(basePath, prefix) {\r\n        var File \u003d java.io.File;\r\n        var dir \u003d new File(basePath);\r\n        if (!dir.exists() || !dir.isDirectory()) {\r\n            return null;\r\n        }\r\n        var list \u003d dir.listFiles();\r\n        if (list \u003d\u003d null) {\r\n            return null;\r\n        }\r\n        var result \u003d null;\r\n        for (var i \u003d 0; i \u003c list.length; i++) {\r\n            var file \u003d list[i];\r\n            if (file.isDirectory() \u0026\u0026 file.getName().startsWith(prefix)) {\r\n                result \u003d file.getName();\r\n                break;\r\n            }\r\n        }\r\n        if (result !\u003d\u003d null) {\r\n            return basePath + result;\r\n        } else {\r\n            throw new Error(\"查找ShortX目录失败\")\r\n        }\r\n    }\r\n    var ShortX_Path \u003d findRandomDirWithPrefix(\"/data/system/\", \"shortx\");\n    var isRunAction \u003d false;\r\n    try {\r\n        {factTag}\r\n    } catch (e) {\r\n        isRunAction \u003d true;\r\n    }\n    if(!isRunAction){\n        var tiggerTag\u003dfactTag;\n    }\n    corecode \u003d readFileContent(ShortX_Path+\"/data/Fluid_Cloud/core.js\");\n    eval(corecode);\n    }catch(e){\n    error\u003de.message;\n    }\n}\n\n\"运行中的错误：\" + error;",
    "context": "CoroutineContext_UI",
    "customContextDataKey": {
      "keys": [{
        "first": "jsRet",
        "second": "jsRet"
      }]
    },
    "note": "All in One",
    "id": "A-d3d33311-3dd4-482d-9e47-4767a6e6eadc"
  }, {
    "@type": "type.googleapis.com/IfThenElse",
    "If": [{
      "@type": "type.googleapis.com/EvaluateContextVar",
      "op": "DoesNotContain",
      "varName": "jsRet",
      "payload": {
        "value": "运行中的错误：undefined"
      },
      "customContextDataKey": {
      },
      "id": "C-da958794-dd3a-40a4-b847-bf08a09a39bb"
    }],
    "IfActions": [{
      "@type": "type.googleapis.com/ShowAlertDialog",
      "positive": "复制日志",
      "onPositive": [{
        "@type": "type.googleapis.com/WriteClipboard",
        "text": "{jsRet}",
        "customContextDataKey": {
        },
        "id": "A-ea62cce2-812e-41a9-a971-c289a1b14901"
      }],
      "neutral": "关闭",
      "title": "错误！",
      "message": "{jsRet}",
      "cancelable": true,
      "style": {
        "fontScale": 1.0
      },
      "customContextDataKey": {
      },
      "id": "A-652ed8ee-f68f-4997-bed1-371ea4b4feff"
    }],
    "customContextDataKey": {
    },
    "id": "A-d5104018-5dc3-4b1c-ba1c-3432c297bde2"
  }],
  "id": "SHARE-rule-9b06ba48-aa14-40df-9eb0-d95303405f99",
  "lastUpdateTime": "1757841581231",
  "createTime": "1723386652518",
  "author": {
    "name": "nyehueh"
  },
  "title": "流体云组件3.3（云端规则版）",
  "description": "⬆️打开指令后，点击上方图标→执行动作，进入设置页，GitHub仓库：https://github.com/nyehueh/shortx-Fluid_Cloud/tree/main",
  "isEnabled": true,
  "hook": {
    "actionsOnEnabled": [{
      "@type": "type.googleapis.com/ExecuteJS",
      "expression": "importClass(org.json.JSONArray);\nimportClass(org.json.JSONObject);\nimportClass(org.json.JSONTokener);\nimportClass(android.os.Handler);\nimportClass(android.os.Looper);\nimportPackage(android.view);\nimportPackage(android.widget);\nimportPackage(android.content);\nimportPackage(android.graphics);\nimportClass(android.graphics.drawable.GradientDrawable);\nimportClass(android.graphics.PixelFormat);\nimportClass(android.view.WindowManager);\nimportClass(java.lang.Runnable);\nimportClass(java.lang.Thread);\nimportClass(android.app.ActivityOptions);\nimportClass(android.graphics.Rect);\nimportClass(android.graphics.Point);\nimportClass(android.view.Surface);\nimportClass(android.app.ActivityManager);\nimportClass(android.content.pm.PackageManager);\nimportClass(android.os.UserHandle);\nimportClass(android.net.Uri);\nimportClass(Packages.tornaco.apps.shortx.core.proto.action.ShellCommand);\nimportClass(Packages.tornaco.apps.shortx.core.proto.action.WriteClipboard);\nimportClass(android.view.Gravity);\nimportClass(android.view.MotionEvent);\nimportClass(android.util.DisplayMetrics);\nimportClass(android.content.Context); importClass(java.io.FileReader);\nimportClass(java.io.BufferedReader);\nimportPackage(java.net);\nimportPackage(java.io);\nimportPackage(java.lang);\nimportClass(Packages.tornaco.apps.shortx.core.proto.action.ShowToast);\nvar netruleerror\u003d{\"rules\":[],\"nolinkrules\":[]};\nvar rulesnum\u003d{\"rules\":0,\"nolinkrules\":0};\nvar rulessuccessnum\u003d{\"rules\":0,\"nolinkrules\":0};\nfunction showToast(text) {\n    action \u003d ShowToast.newBuilder().setMessage(text).build();\n    shortx.executeAction(action);\n}\nfunction getnetconfig(rulename){\n    function readStreamAsString(inputStream) {\n        var reader \u003d new BufferedReader(new InputStreamReader(inputStream, \"UTF-8\"));\n        var sb \u003d new StringBuilder();\n        var line;\n        while ((line \u003d reader.readLine()) !\u003d null) {\n            sb.append(line).append(\"\\n\");\n        }\n        reader.close();\n        return sb.toString().trim(); \n    }\n    function httpGet(urlStr) {\n        try {\n            var url \u003d new URL(urlStr);\n            var conn \u003d url.openConnection();\n            conn.setRequestProperty(\"User-Agent\", \"Rhino-Script/1.0\");\n            conn.setConnectTimeout(15000);\n            conn.setReadTimeout(30000);\n\n            var code \u003d conn.getResponseCode();\n            if (code \u003e\u003d 400) {\n                var errStream \u003d conn.getErrorStream();\n                var msg \u003d errStream ? readStreamAsString(errStream) : \"HTTP \" + code;\n                throw new Error(\"HTTP \" + code + \": \" + msg);\n            }\n\n            return readStreamAsString(conn.getInputStream());\n        } catch (e) {\n            throw new Error(\"请求失败: \" + urlStr + \" -\u003e \" + (e.javaException ? e.javaException.getMessage() : e));\n        }\n    }\n    function fetchJsonList() {\n        var owner \u003d \"nyehueh\";\n        var repo \u003d \"shortx-Fluid_Cloud\";\n        var branch \u003d \"main\";\n        var folder \u003d rulename;\n\n        var apiUrl \u003d \"https://api.github.com/repos/\" + owner + \"/\" + repo + \"/contents/\" + folder + \"?ref\u003d\" + branch;\n        var rawBase \u003d \"https://raw.githubusercontent.com/\" + owner + \"/\" + repo + \"/\" + branch + \"/\" + folder;\n\n        var jsonList \u003d [];\n\n        try {\n            var jsonResponse \u003d httpGet(apiUrl);\n            var fileList \u003d JSON.parse(jsonResponse);\n            var jsonFiles \u003d [];\n            for (var i \u003d 0; i \u003c fileList.length; i++) {\n                var item \u003d fileList[i];\n                if (item.type \u003d\u003d\u003d \"file\" \u0026\u0026 item.name.toLowerCase().endsWith(\".json\")) {\n                    jsonFiles.push(item.name);\n                }\n            }\n\n            if (jsonFiles.length \u003d\u003d\u003d 0) {\n                throw new Error(\"未找到任何 .json 文件\");\n            }else{\n                rulesnum[rulename]\u003djsonFiles.length;\n            }\n            for (var i \u003d 0; i \u003c jsonFiles.length; i++) {\n                var filename \u003d jsonFiles[i];\n                var fileUrl \u003d rawBase + \"/\" + filename;\n\n                try {\n                    var content \u003d httpGet(fileUrl);\n                    var jsonObj \u003d JSON.parse(content); \n                    jsonList.push(jsonObj);\n                } catch (e) {\n                    netruleerror[rulename].push({\n                        error: true,\n                        filename: filename,\n                        message: e.message\n                    });\n                }\n            }\n\n        } catch (e) {\n            return [];\n        }\n        rulessuccessnum[rulename]\u003djsonList.length;\n        return jsonList;\n    }\n\n    var jsonList \u003d fetchJsonList();\n    if(jsonList.length\u003d\u003d\u003d0){\n        return \"无法连接到GitHub仓库\";\n    }else{\n        return jsonList;\n    }\n}\n\nfunction replaceAll(text, target, replacement) {\n    var pattern \u003d new RegExp(target, \"g\");\n    return text.replace(pattern, replacement);\n}\n\nfunction writeConfigToFile(filePath, config, bz) {\n    importClass(java.io.File);\n    importClass(java.io.FileOutputStream);\n    importClass(java.io.OutputStreamWriter);\n    importClass(java.io.BufferedWriter);\n\n    var file \u003d new File(filePath);\n    var parent \u003d file.getParentFile();\n    if (!parent.exists()) {\n        parent.mkdirs();\n    }\n    try {\n        var writer \u003d new java.io.FileWriter(filePath);\n        var bufferedWriter \u003d new java.io.BufferedWriter(writer);\n        var jsonString \u003d JSON.stringify(config, null, 2);\n        bufferedWriter.write(bz + jsonString);\n        bufferedWriter.close();\n    } catch (e) { }\n}\n\nfunction isKeyInObList(obList, key, value) {\n    var qvc \u003d obList.some(function (item) {\n        return item[key] \u003d\u003d\u003d value;\n    });\n    return qvc;\n}\n\nfunction readJsonFile(filePath) {\n    try {\n        var reader \u003d new BufferedReader(new FileReader(filePath));\n        var sb \u003d new java.lang.StringBuilder();\n        var line;\n        var start \u003d false;\n        while ((line \u003d reader.readLine()) !\u003d null) {\n            var trimmed \u003d line.trim();\n            if (!start) {\n                if (trimmed.startsWith(\"{\") || trimmed.startsWith(\"[\")) {\n                    start \u003d true;\n                } else {\n                    continue;\n                }\n            }\n            sb.append(line);\n        }\n        reader.close();\n        var jsonText \u003d String(sb.toString());\n        return JSON.parse(jsonText);\n    } catch (e) {\n        throw new Error(\"配置文件读取失败：\" + e.message);\n    }\n}\n\nfunction findRandomDirWithPrefix(basePath, prefix) {\n    var File \u003d java.io.File;\n    var dir \u003d new File(basePath);\n    if (!dir.exists() || !dir.isDirectory()) {\n        return null;\n    }\n    var list \u003d dir.listFiles();\n    if (list \u003d\u003d null) {\n        return null;\n    }\n    var result \u003d null;\n    for (var i \u003d 0; i \u003c list.length; i++) {\n        var file \u003d list[i];\n        if (file.isDirectory() \u0026\u0026 file.getName().startsWith(prefix)) {\n            result \u003d file.getName();\n            break;\n        }\n    }\n    return basePath + result;\n}\n\nvar shortxpath \u003d findRandomDirWithPrefix(\"/data/system/\", \"shortx\");\nvar uiClosed \u003d false;\nvar versionName \u003d \"\";\n\nfunction configVersion(path) {\n    var File \u003d java.io.File;\n    var FileInputStream \u003d java.io.FileInputStream;\n    var InputStreamReader \u003d java.io.InputStreamReader;\n    var BufferedReader \u003d java.io.BufferedReader;\n    var file \u003d new File(path);\n    if (!file.exists()) {\n        return 0;\n    }\n    var fis \u003d new FileInputStream(file);\n    var isr \u003d new InputStreamReader(fis, \"UTF-8\");\n    var br \u003d new BufferedReader(isr);\n    br.readLine();\n    var secondLine \u003d br.readLine();\n    br.close();\n    result \u003d parseFloat(secondLine);\n    if (isNaN(result)) {\n        return 0;\n    } else {\n        return result;\n    }\n}\n\nfunction showCountdownDialogBox(title, text, time) {\n    function runOnUiThread(fn) {\n        new Handler(Looper.getMainLooper()).post(new Runnable({ run: fn }));\n    }\n    runOnUiThread(function () {\n        var windowManager \u003d context.getSystemService(Context.WINDOW_SERVICE);\n        var metrics \u003d new DisplayMetrics();\n        windowManager.getDefaultDisplay().getMetrics(metrics);\n        var screenWidth \u003d metrics.widthPixels;\n        var screenHeight \u003d metrics.heightPixels;\n\n        var layout \u003d new LinearLayout(context);\n        layout.setOrientation(LinearLayout.VERTICAL);\n        layout.setBackgroundColor(Color.TRANSPARENT);\n        var backgroundDrawable \u003d new android.graphics.drawable.GradientDrawable();\n        backgroundDrawable.setColor(Color.WHITE);\n        backgroundDrawable.setCornerRadius(50);\n        layout.setBackground(backgroundDrawable);\n        layout.setPadding(40, 40, 40, 40);\n\n        var layoutParams \u003d new WindowManager.LayoutParams(\n            parseInt(screenWidth * 0.9),\n            parseInt(screenHeight * 0.8),\n            WindowManager.LayoutParams.TYPE_APPLICATION_OVERLAY,\n            WindowManager.LayoutParams.FLAG_NOT_TOUCH_MODAL | WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN,\n            PixelFormat.TRANSLUCENT\n        );\n        layoutParams.gravity \u003d Gravity.CENTER;\n\n        var titleView \u003d new TextView(context);\n        titleView.setText(title);\n        titleView.setTextSize(22);\n        titleView.setTextColor(Color.BLACK);\n        titleView.setGravity(Gravity.CENTER);\n        titleView.setPadding(0, 0, 0, 20);\n        layout.addView(titleView);\n\n        var scrollView \u003d new ScrollView(context);\n        var scrollParams \u003d new LinearLayout.LayoutParams(\n            LinearLayout.LayoutParams.MATCH_PARENT,\n            0,\n            1\n        );\n        scrollView.setLayoutParams(scrollParams);\n\n        var textView \u003d new TextView(context);\n        textView.setText(text);\n        textView.setTextSize(18);\n        textView.setTextColor(Color.DKGRAY);\n        textView.setGravity(Gravity.LEFT);\n        scrollView.addView(textView);\n        layout.addView(scrollView);\n\n        var buttonLayout \u003d new LinearLayout(context);\n        buttonLayout.setOrientation(LinearLayout.HORIZONTAL);\n        buttonLayout.setGravity(Gravity.CENTER);\n        buttonLayout.setPadding(0, 30, 0, 0);\n        layout.addView(buttonLayout);\n\n        var closeButton \u003d new Button(context);\n        closeButton.setText(\"下一步 (\" + time + \")\");\n        closeButton.setTextColor(Color.WHITE);\n        closeButton.setEnabled(false);\n\n        function createRoundedDrawable(color) {\n            var drawable \u003d new android.graphics.drawable.GradientDrawable();\n            drawable.setColor(color);\n            drawable.setCornerRadius(30);\n            return drawable;\n        }\n        closeButton.setBackgroundDrawable(createRoundedDrawable(Color.parseColor(\"#BDBDBD\")));\n\n        buttonLayout.addView(closeButton);\n\n        var secondsRemaining \u003d time;\n        var handler \u003d new Handler();\n        var countdownRunnable \u003d new Runnable({\n            run: function () {\n                secondsRemaining--;\n                if (secondsRemaining \u003e 0) {\n                    closeButton.setText(\"下一步 (\" + secondsRemaining + \")\");\n                    handler.postDelayed(this, 1000);\n                } else {\n                    closeButton.setEnabled(true);\n                    closeButton.setText(\"下一步\");\n                    closeButton.setBackgroundDrawable(createRoundedDrawable(Color.parseColor(\"#08C661\")));\n                }\n            }\n        });\n        handler.postDelayed(countdownRunnable, 1000);\n\n        closeButton.setOnClickListener(new View.OnClickListener({\n            onClick: function () {\n                if (!closeButton.isEnabled()) return;\n                var writeLocalVar \u003d Packages.tornaco.apps.shortx.core.proto.action.WriteLocalVar.newBuilder()\n                    .setVarName(\"next\")\n                    .setValueAsString(\"true\")\n                    .build();\n                shortx.executeAction(writeLocalVar);\n                try {\n                    windowManager.removeView(layout);\n                } catch (e) { }\n                uiClosed \u003d true;\n            }\n        }));\n\n        try {\n            windowManager.addView(layout, layoutParams);\n        } catch (e) {\n            console.log(\"添加视图失败：\" + e);\n            uiClosed \u003d true;\n        }\n    });\n\n    while (!uiClosed) {\n        Thread.sleep(200);\n    }\n}\n\nshowCountdownDialogBox(\n    \"使用说明\",\n    `    0.此指令为自定义UI指令，稳定性与兼容性远不及预制动作制作的指令，如若出现软重启，死机等问题说明你的系统与指令不适配，为确保您的数据安全，请立即停止使用。更新指令与shortx时可能会清理配置，如有自定义的配置，请在更新前做好配置备份，如更新后因配置文件被清理而无法使用，重新开关指令会重新创建默认配置，同时欢迎提交用于各个app的规则（前往简介处GitHub仓库提交pr）\n    \n    1.小窗打开功能需要没有中转层才可正常使用（如：空浏览,UrlCheck,其他浏览器打开等），部分应用可能强制挣脱小窗需求，ColorOS无法使用始终全屏打开时需在指令参数出将小窗参数的值从5改为100(coloros识别机制为oplus应用低版本coloros下可能不存在)，如你正在使用请在设置中手动配置浏览器\n    \n    2.选中提取功能可能需要手动重命名并选择一下上下文菜单触发器\n    \n    3.流体云单击全屏打开，点击按钮使用小窗打开，顶部时上滑关闭下滑进菜单，底部时上滑进菜单，下滑关闭\n    \n    4.配置文件解释：见配置文件内顶部区域\n    \n    5.点击指令的图标，点击执行动作进入图形化配置页面\n    \n    6.安装附加插件实现点击链接交由指令分发\n    \n    7.配置文件目录：${shortxpath}/data/Fluid_Cloud\n    8.点击下一步后将从GitHub获取在线规则，请确保网络环境可正常连接到GitHub，重新开启指令可更新云端规则`,\n    5\n);\n\nvar configys \u003d {\n    \"Top_Level_Domain\": [\"com\", \"cn\", \"top\", \"love\", \"xyz\", \"net\", \"org\", \"vip\", \"cloud\", \"online\", \"icu\", \"fun\", \"work\", \"tv\", \"wiki\", \"email\", \"plus\", \"co\", \"ltd\", \"shop\", \"tech\", \"wang\", \"site\", \"xin\", \"store\", \"art\", \"cc\", \"website\", \"press\", \"space\", \"beer\", \"luxe\", \"video\", \"group\", \"ren\", \"fit\", \"yoga\", \"pro\", \"ink\", \"info\", \"mobi\", \"kim\", \"red\", \"run\", \"chat\", \"cool\", \"zone\", \"host\", \"biz\", \"me\",\"so\"],\n    \"Email_Keyword_List\": [\"qq.com\", \"126.com\", \"163.com\", \"139.com\", \"gmail.com\", \"hotmail.com\", \"sohu.com\", \"sina.com\", \"sina.cn\", \"foxmail.com\", \"outlook.com\", \"aliyun.com\", \"tom.com\", \"yeah.net\", \"live.cn\", \"msn.com\"],\n    \"Extractioncode_Keyword_list\": [\"提取码：\", \"密码：\", \"提取码:\", \"密码:\", \"访问码:\", \"访问码：\", \"提取码 : \"],\n    \"Use_https_keyword_list\": [\"123pan.com\"],\n    \"link_blacklist_keywords\": [\"无\"],\n    \"Window_Configuration\": [1200, 1100, 0.6, 200, 150, 400, 80],\n    \"Launch_Windowing_Mode\": 5,\n    \"Fluid_Cloud_Position\": \"顶部\",\n    \"Fluid_Cloud_Position_Offset\": 10,\n    \"Fluid_Cloud_timeout\": 3000,\n    \"browser\": \"自动\",\n    \"Browser_PackageName_BlackList\": [\n        \"com.jingdong.app.mall\",\n        \"com.taobao.taobao\",\n        \"air.svran.browser.nb\",\n        \"com.trianguloy.urlchecker\",\n        \"com.tmall.wireless\"\n    ],\n    \"allowChar\": \"qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM#_/-:?%@\u003d.\u0026,，；;1234567890\",\n    \"show_Multiple_users\": true,\n    \"show_toast\": true,\n    \"extra_default_action\":\"询问\"\n};\n\nvar configbz \u003d `一.配置版本：\n1.5\n二.字段解释：\nTop_Level_Domain：顶级域名列表\nEmail_Keyword_List：邮箱关键词列表\nExtractioncode_Keyword_list：提取码关键词列表\nUse_https_keyword_list：仅https可用的链接关键词列表（链接无请求头时使用）\nlink_blacklist_keywords：链接黑名单关键词列表(注意是链接内的关键词，不是包名)\nWindow_Configuration:小窗的大小与位置配置，从左到右依次为竖屏高度 横屏高度 宽高比 竖屏左侧留空 横屏左侧留空 竖屏上侧留空 横屏上侧留空\nLaunch_Windowing_Mode：可触发小窗的Windowsmode值，coloros为100(会自动识别，旧版本可能不能识别需要修改为100)，米，类原生为5\nFluid_Cloud_Position：流体云显示位置（顶部，底部）\nFluid_Cloud_Position_Offset:流体云位置偏移(向上偏移减小值向下偏移增加值)\nFluid_Cloud_timeout：流体云显示超时时长，超过设定毫秒数无动作浮窗消失\nbrowser:浏览器包名(填自动表示自动识别)\nBrowser_PackageName_BlackList：浏览器黑名单，识别到的默认浏览器在黑名单内时会重新寻找其他的浏览器\nallowChar:允许出现在链接中的字符\nshow_Multiple_users:显示多用户应用（true 开启/false 关闭）\nshow_toast:是否显示吐司提示(true 显示/false 不显示)\nextra_default_action:附加插件触发时的动作（询问，小窗打开，全屏打开）\n\n三.配置：\n`;\n\nif (configVersion(shortxpath + \"/data/Fluid_Cloud/config.json\") \u003d\u003d 0) {\n    writeConfigToFile(shortxpath + \"/data/Fluid_Cloud/config.json\", configys, configbz);\n} else {\n    var nowConfig \u003d readJsonFile(shortxpath + \"/data/Fluid_Cloud/config.json\");\n    var nowConfigKeys \u003d Object.keys(nowConfig);\n    var ysConfigKeys \u003d Object.keys(configys);\n    for (var i \u003d 0; i \u003c nowConfigKeys.length; i++) {\n        if (ysConfigKeys.includes(nowConfigKeys[i])) {\n            if(typeof nowConfig[nowConfigKeys[i]] !\u003d\"object\"||nowConfigKeys[i]\u003d\u003d\"Window_Configuration\"){\n                configys[nowConfigKeys[i]] \u003d nowConfig[nowConfigKeys[i]];\n            }else{\n                for(var j\u003d0;j\u003cnowConfig[nowConfigKeys[i]].length;i++){\n                    if(!configys[nowConfigKeys[i]].includes(nowConfig[nowConfigKeys[i]][j])){\n                        configys[nowConfigKeys[i]].push(nowConfig[nowConfigKeys[i]][j]);\n                    }\n                }\n            }\n        }\n    }\n    writeConfigToFile(shortxpath + \"/data/Fluid_Cloud/config.json\", configys, configbz);\n}\n\nvar ruleVersion \u003d configVersion(shortxpath + \"/data/Fluid_Cloud/rules.json\");\nvar nolinkruleVersion \u003d configVersion(shortxpath + \"/data/Fluid_Cloud/rules.json\");\nvar rulebz \u003d `一.配置版本：\n2.2\n二.字段解释：\n1.url/intent类型：\n\"name\":\"百度网盘\",//必填项：名称（随意填）更新时名称不存在于预设中的规则会被保留，否则将会被覆盖\n\"tigger\":[\"pan\\\\\\\\.baidu\\\\\\\\.com\"],//必填项：触发器(链接满足正则(包含匹配)时触发此条规则)注意点要转义\n\"type\":\"url\",//必填项：类型(url：设定此条规则为urlschame规则，pkg：设定此条规则为指定包名规则 注：指定包名规则需应用支持打开才可以，否则会报错，intent:设定此条规则为intent规则，格式与url相同)\n\"check\":\"bdnetdisk://\",//type为url/intent时为必填项：检测（填写目标应用可稳定触发的url或包名，检测是否有对应的应用，没有安装此规则对应应用时不触发）\ntopcondition:置顶条件(可选项)，满足条件时该规则置顶，格式与rule中的condition相同\n\"Custom_variable\",//(可选项)自定义变量列表，[{\"name\":\"变量名\",,\"action\":执行的操作(可选项默认为match，match：正则匹配，replace：替换，splicing：拼接)\"pattern\":匹配和替换专属必选项填正则字符串(从text中匹配字符，或替换的目标),\"text\":匹配替换专属必选项，正则从text中匹配或替换（text填变量名，变量名可为内置的link和input，也可为自定义的变量名）,\"index\":取正则匹配结果的第几项（match专属可选项，无该字段为默认为1）,\"replacement\":替换专属必选项，替换成的内容,\"valuetext\":拼接专属必选项，格式与rule的rule_text相同}]\n\"rule\"://必填项：规则列表[\"condition\":条件列表（可选项，无该项为默认为始终满足，优先级最低）存在该项时取满足且条件数量最多的结果，\"many_condition_tactic\":多条件策略（可选项，无该项默认为All，All：条件全部满足，Any：任意一个满足，None：全部不满足）\"rule_text\":含有变量占位符如【link】的urlschame或intent]\n条件列表内的条件对象：{condition_type:条件类型（withcode：存在提取码，withoutcode：不存在提取码，cantains：condition_text中包含文本，notcantains：不包含）,condition_text:包含于不包含条件使用的字段（判断该字段是否包含满足正则的文本）,condition_pattern:判断用的正则}\n\n2.pkg类型：\n\"name\":\"telegram\",//名称（同上）\n\"tigger\":[\"t\\\\\\\\.me\"],//触发器（同上）\n\"type\":\"pkg\",//必填项，该项为pkg时表示设定此条规则为指定应用规则\n\"pkg\":\"tg://\"//type为pkg时为必填项，填包名或url，用对应的应用打开（如填写包名报错可改为填写确保应用可以打开的urlschame，填写url时会尝试自动匹配活动）\n\"activityname\"//可选项，指定打开链接的活动(如：com.xingin.xhs.routers.RouterPageActivity，pkg字段填写url时会尝试自动匹配)\n\n三.规则：\n`;\n\nvar ruleysConfig \u003d getnetconfig(\"rules\");\nif(ruleysConfig\u003d\u003d\"无法连接到GitHub仓库\"){\n    showCountdownDialogBox(\n        \"无法连接到仓库\",\n        \"无法连接到GitHub规则仓库，可挂v后再试\",\n        3\n    );\n    throw new Error(\"无法连接到GitHub仓库\");\n}\nvar nolinkbz \u003d `一.配置版本：\n2.2\n二.字段解释：\nname:必填项：名称（随意填）更新时名称不存在于预设中的规则会被保留，否则将会被覆盖\ntigger:必填项：触发器(链接满足正则(包含匹配)时触发此条规则)\ntype:必填项：类型(url：设定此条规则为urlschame规则，intent:设定此条规则为intent规则，格式与url相同,rein:重入，以rule结果为输入重新识别)\ncheck:必填项：检测（填写目标应用可稳定触发的url或包名，检测是否有对应的应用，没有安装此规则对应应用时不触发）\ntopcondition:置顶条件(可选项)，满足条件时该规则置顶，格式与rule中的condition相同\n\"Custom_variable\",//(可选项)自定义变量列表，[{\"name\":\"变量名\",,\"action\":执行的操作(可选项默认为match，match：正则匹配，replace：替换，splicing：拼接)\"pattern\":匹配和替换专属必选项填正则字符串(从text中匹配字符，或替换的目标),\"text\":匹配替换专属必选项，正则从text中匹配或替换（text填变量名，变量名可为内置的link和input，也可为自定义的变量名）,\"index\":取正则匹配结果的第几项（match专属可选项，无该字段为默认为1）,\"replacement\":替换专属必选项，替换成的内容,\"valuetext\":拼接专属必选项，格式与rule的rule_text相同}]\n\"rule\"://必填项：规则列表[\"condition\":条件列表（可选项，无该项为默认为始终满足，优先级最低）存在该项时取满足且条件数量最多的结果，\"many_condition_tactic\":多条件策略（可选项，无该项默认为All，All：条件全部满足，Any：任意一个满足，None：全部不满足）\"rule_text\":含有变量占位符如【link】的urlschame或intent]\n//\"条件列表内的条件对象：{condition_type:条件类型（withcode：存在提取码，withoutcode：不存在提取码，cantains：condition_text中包含文本，notcantains：不包含）,condition_text:包含于不包含条件使用的字段（判断该字段是否包含满足正则的文本）,condition_pattern:判断用的正则}\n//title：必填项：可包含自定义键值对占位符的在流体云上显示的标题\n//message：必填项：可包含自定义键值对占位符的在流体云标题下方的描述\n//icon:选填项，应用包名，强制将图标显示为填写包名的应用对应的图标\n\n三.规则：\n`\nvar nolinkysConfig \u003d getnetconfig(\"nolinkrules\");\nif(nolinkysConfig\u003d\u003d\"无法连接到GitHub仓库\"){\n    showCountdownDialogBox(\n        \"无法连接到仓库\",\n        \"无法连接到GitHub规则仓库，可挂v后再试\",\n        3\n    );\n    throw new Error(\"无法连接到GitHub仓库\");\n}\n\nfunction processRules(nowRules, config, filePath, bz) {\n    var zdyRules \u003d [];\n    for (var i \u003d 0; i \u003c nowRules.length; i++) {\n        if (!isKeyInObList(config, \"name\", nowRules[i].name)) {\n            var Custom_variable \u003d [];\n            var KEYS \u003d Object.keys(nowRules[i]);\n            if (typeof nowRules[i].rule \u003d\u003d \"object\") {\n                if (typeof nowRules[i].condition !\u003d\u003d \"string\" \u0026\u0026 [\"object\", \"undefined\", \"null\"].includes(typeof nowRules[i].topcondition)) {\n                    zdyRules.push(nowRules[i]);\n                } else if (typeof nowRules[i].condition \u003d\u003d \"string\") {\n                    var conditions \u003d [];\n                    for (var j \u003d 0; j \u003c nowRules[i].condition.length; j++) {\n                        conditions.push({\n                            \"condition_type\": \"contains\",\n                            \"condition_text\": \"input\",\n                            \"condition_pattern\": nowRules[i].condition[j]\n                        })\n                    }\n                    zdyRules.push({\n                        \"name\": nowRules[i].name,\n                        \"tigger\": nowRules[i].tigger,\n                        \"type\": nowRules[i].type,\n                        \"check\": nowRules[i].check,\n                        \"topcondition\": {\n                            condition: conditions,\n                            \"many_condition_tactic\": \"Any\"\n                        },\n                        \"Custom_variable\": Custom_variable,\n                        \"rule\": nowRules[i].rule\n                    });\n                } else { continue; }\n            } else {\n                for (var j \u003d 0; j \u003c KEYS.length; j++) {\n                    if (![\"name\", \"tigger\", \"rule\", \"type\", \"check\", \"condition\", \"topcondition\", \"rulewithtqm\", \"activityname\", \"pkg\"].includes(KEYS[j])) {\n                        Custom_variable.push({\n                            \"name\": KEYS[j],\n                            \"pattern\": nowRules[i][KEYS[j]],\n                            \"text\": \"link\",\n                            \"index\": 1\n                        });\n                    }\n                }\n                if (Custom_variable.length \u003d\u003d\u003d 0) Custom_variable \u003d undefined;\n                var topcondition \u003d handleTopCondition(nowRules[i], KEYS);\n                zdyRules.push({\n                    \"name\": nowRules[i].name,\n                    \"tigger\": nowRules[i].tigger,\n                    \"type\": nowRules[i].type,\n                    \"check\": nowRules[i].check,\n                    \"topcondition\": topcondition,\n                    \"Custom_variable\": Custom_variable,\n                    \"rule\": [{ \"rule_text\": nowRules[i].rule }]\n                });\n                if (KEYS.includes(\"rulewithtqm\")) {\n                    zdyRules[zdyRules.length - 1].rule.unshift({\n                        \"condition\": [\n                            {\n                                \"condition_type\": \"withcode\"\n                            }\n                        ],\n                        \"many_condition_tactic\": \"All\",\n                        \"rule_text\": replaceAll(nowRules[i].rulewithtqm, \"【tqm】\", \"【code】\")\n                    });\n                }\n            }\n        }\n    }\n\n\n    writeConfigToFile(filePath, zdyRules.concat(config), bz);\n}\n\n\nfunction handleTopCondition(rule, KEYS) {\n    var topcondition;\n\n    if (!KEYS.includes(\"topcondition\") \u0026\u0026 KEYS.includes(\"condition\")) {\n        var conditions \u003d [];\n        for (var j \u003d 0; j \u003c rule.condition.length; j++) {\n            conditions.push({\n                \"condition_type\": \"contains\",\n                \"condition_text\": \"input\",\n                \"condition_pattern\": rule.condition[j]\n            })\n        }\n        topcondition \u003d {\n            condition: conditions,\n            \"many_condition_tactic\": \"Any\"\n        };\n    } else if (KEYS.includes(\"topcondition\")) {\n        if (typeof rule.topcondition \u003d\u003d\u003d \"object\") {\n            topcondition \u003d rule.topcondition;\n        } else { return undefined; }\n    } else {\n        topcondition \u003d undefined;\n    }\n\n    return topcondition;\n}\n\n\nif (ruleVersion \u003d\u003d 0) {\n    writeConfigToFile(shortxpath + \"/data/Fluid_Cloud/rules.json\", ruleysConfig, rulebz);\n} else {\n    var nowRules \u003d readJsonFile(shortxpath + \"/data/Fluid_Cloud/rules.json\");\n    processRules(nowRules, ruleysConfig, shortxpath + \"/data/Fluid_Cloud/rules.json\", rulebz);\n}\n\n\nif (nolinkruleVersion \u003d\u003d 0) {\n    writeConfigToFile(shortxpath + \"/data/Fluid_Cloud/nolinkrules.json\", nolinkysConfig, nolinkbz);\n} else {\n    var nowRules \u003d readJsonFile(shortxpath + \"/data/Fluid_Cloud/nolinkrules.json\");\n    processRules(nowRules, nolinkysConfig, shortxpath + \"/data/Fluid_Cloud/nolinkrules.json\", nolinkbz);\n}\n\n\nwriteConfigToFile(shortxpath + \"/data/Fluid_Cloud/recordcopy.json\", { \"CopiedText\": false }, \"\");\n\nvar isLowVersion \u003d false;\ntry {\n    console.log(\"版本检测通过\");\n} catch (e) {\n    isLowVersion \u003d true;\n}\n\nif (isLowVersion) {\n    showCountdownDialogBox(\"ShortX版本过低\", \"请更新至最新版本后使用\", 3);\n}\nvar net_rule_sync_error_message\u003d\"\";\nif(netruleerror[\"rules\"].length!\u003d0){\n    net_rule_sync_error_message+\u003d\"链接分发规则共\"+rulesnum[\"rules\"]+\"个规则，成功\"+rulessuccessnum[\"rules\"]+\"个，失败\"+netruleerror[\"rules\"].length+\"个\"+\"\\n错误信息：\\n\"+JSON.stringify(netruleerror[\"rules\"],null,2);\n}else{\n    showToast(\"成功更新链接分发规则共\"+rulessuccessnum[\"rules\"]+\"个\");\n}\nif(netruleerror[\"nolinkrules\"].length!\u003d0){\n    net_rule_sync_error_message+\u003d\"无链接规则共\"+rulesnum[\"nolinkrules\"]+\"个规则，成功\"+rulessuccessnum[\"nolinkrules\"]+\"个，失败\"+netruleerror[\"nolinkrules\"].length+\"个\"+\"\\n错误信息：\\n\"+JSON.stringify(netruleerror[\"nolinkrules\"],null,2);\n}else{\n    showToast(\"成功无链接规则共\"+rulessuccessnum[\"nolinkrules\"]+\"个\");\n}\nif(net_rule_sync_error_message !\u003d\"\"){\n    showCountdownDialogBox(\n    \"部分失败\",\n    net_rule_sync_error_message,\n    2\n);\n}\nfunction writeFile(path, content) {\n    importClass(java.io.File);\n    importClass(java.io.FileOutputStream);\n    importClass(java.io.OutputStreamWriter);\n    importClass(java.io.BufferedWriter);\n    var file \u003d new File(path);\n    var parent \u003d file.getParentFile();\n    if (!parent.exists()) {\n        parent.mkdirs();\n    }\n    var fos \u003d new FileOutputStream(file, false); \n    var writer \u003d new BufferedWriter(new OutputStreamWriter(fos, \"utf-8\"));\n    writer.write(content);\n    writer.close();\n    return \"写入成功: \" + path;\n}\nwriteFile(shortxpath+\"/data/Fluid_Cloud/core.js\",`importClass(org.json.JSONArray);\nimportClass(org.json.JSONObject);\nimportClass(org.json.JSONTokener);\nimportClass(android.os.Handler);\nimportClass(android.os.Looper);\nimportPackage(android.view);\nimportPackage(android.widget);\nimportPackage(android.content);\nimportPackage(android.graphics);\nimportClass(android.graphics.drawable.GradientDrawable);\nimportClass(android.graphics.PixelFormat);\nimportClass(android.view.WindowManager);\nimportClass(java.lang.Runnable);\nimportClass(java.lang.Thread);\nimportClass(android.app.ActivityOptions);\nimportClass(android.graphics.Rect);\nimportClass(android.graphics.Point);\nimportClass(android.view.Surface);\nimportClass(android.app.ActivityManager);\nimportClass(android.content.pm.PackageManager);\nimportClass(android.os.UserHandle);\nimportClass(android.net.Uri);\nimportClass(Packages.tornaco.apps.shortx.core.proto.action.ShellCommand);\nimportClass(Packages.tornaco.apps.shortx.core.proto.action.WriteClipboard);\nimportClass(android.view.Gravity);\nimportClass(android.view.MotionEvent);\nimportClass(android.util.DisplayMetrics);\nimportClass(android.content.Context);\nimportClass(java.io.FileReader);\nimportClass(java.io.BufferedReader);\nimportClass(Packages.tornaco.apps.shortx.core.proto.action.ShowToast);\nimportClass(android.os.ServiceManager);\nimportClass(android.content.pm.IPackageManager$Stub);\nvar windowManager \u003d context.getSystemService(Context.WINDOW_SERVICE);\nvar metrics \u003d new DisplayMetrics();\nwindowManager.getDefaultDisplay().getMetrics(metrics);\nvar screenWidth \u003d metrics.widthPixels;\nvar screenHeight \u003d metrics.heightPixels;\n\n\nfunction getForegroundAppPackageName() {\n    var am \u003d context.getSystemService(Context.ACTIVITY_SERVICE);\n    var runningAppProcesses \u003d am.getRunningAppProcesses();\n    if (runningAppProcesses !\u003d null) {\n        for (var i \u003d 0; i \u003c runningAppProcesses.size(); i++) {\n            var processInfo \u003d runningAppProcesses.get(i);\n            if (processInfo.importance \u003d\u003d ActivityManager.RunningAppProcessInfo.IMPORTANCE_FOREGROUND) {\n                return String(processInfo.pkgList[0]);\n            }\n        }\n    }\n    return null;\n}\n\nfunction ToBoolean(str) {\n    return String(str).toLowerCase() \u003d\u003d\u003d \"true\";\n}\nfunction showToast(text) {\n    if (show_toast) {\n        action \u003d ShowToast.newBuilder().setMessage(text).build();\n        shortx.executeAction(action);\n    }\n}\n\n\n\n\n\nfunction readJsonFile(filePath) {\n    try {\n        var reader \u003d new BufferedReader(new FileReader(filePath));\n        var sb \u003d new java.lang.StringBuilder();\n        var line;\n        var start \u003d false;\n\n        while ((line \u003d reader.readLine()) !\u003d null) {\n            var trimmed \u003d line.trim();\n            if (!start) {\n                if (trimmed.startsWith(\"{\") || trimmed.startsWith(\"[\")) {\n                    start \u003d true;\n                } else {\n                    continue;\n                }\n            }\n            sb.append(line);\n        }\n        reader.close();\n\n        var jsonText \u003d String(sb.toString());\n        return JSON.parse(jsonText);\n    } catch (e) {\n        throw new Error(\"配置文件读取失败：\" + e.message);\n    }\n}\n\n\nvar config \u003d readJsonFile(ShortX_Path + \"/data/Fluid_Cloud/config.json\")\n\n\nfunction writeConfigToFile(filePath, config, Remarks) {\n    try {\n        var writer \u003d new java.io.FileWriter(filePath);\n        var bufferedWriter \u003d new java.io.BufferedWriter(writer);\n        var jsonString \u003d JSON.stringify(config, null, 2);\n        bufferedWriter.write(Remarks + jsonString);\n\n        bufferedWriter.close();\n    } catch (e) { showToast(\"配置保存失败\") }\n}\n\n\nfunction showStringListEditor(defaultValues, listname, callback) {\n    var result \u003d null;\n    function runOnUiThread(fn) {\n        new Handler(Looper.getMainLooper()).post(new Runnable({ run: fn }));\n    }\n    runOnUiThread(function () {\n        var wm \u003d context.getSystemService(Context.WINDOW_SERVICE);\n        var layout \u003d new LinearLayout(context);\n        layout.setOrientation(LinearLayout.VERTICAL);\n        layout.setPadding(40, 40, 40, 40);\n        layout.setBackgroundColor(android.graphics.Color.parseColor(\"#FF2E2E2E\"));\n        var title \u003d new TextView(context);\n        title.setText(listname);\n        title.setTextColor(android.graphics.Color.WHITE);\n        title.setTextSize(20);\n        title.setGravity(android.view.Gravity.CENTER);\n        title.setPadding(0, 0, 0, 30);\n        layout.addView(title);\n        var scrollView \u003d new ScrollView(context);\n        var scrollParams \u003d new LinearLayout.LayoutParams(-1, dip2px(400));\n        scrollView.setLayoutParams(scrollParams);\n        var container \u003d new LinearLayout(context);\n        container.setOrientation(LinearLayout.VERTICAL);\n        container.setPadding(0, 10, 0, 10);\n        scrollView.addView(container);\n        layout.addView(scrollView);\n        var inputItems \u003d [];\n        function addInputItem(text) {\n            var itemLayout \u003d new LinearLayout(context);\n            itemLayout.setOrientation(LinearLayout.HORIZONTAL);\n            itemLayout.setPadding(0, 10, 0, 10);\n            var et \u003d new EditText(context);\n            et.setText(text || \"\");\n            et.setTextColor(android.graphics.Color.WHITE);\n            et.setHintTextColor(android.graphics.Color.GRAY);\n            et.setBackgroundColor(android.graphics.Color.parseColor(\"#33FFFFFF\"));\n            et.setPadding(20, 20, 20, 20);\n            et.setLayoutParams(new LinearLayout.LayoutParams(0, -2, 1));\n            et.setInputType(android.text.InputType.TYPE_CLASS_TEXT);\n            var delBtn \u003d new TextView(context);\n            delBtn.setText(\"✕\");\n            delBtn.setTextSize(18);\n            delBtn.setTextColor(android.graphics.Color.LTGRAY);\n            delBtn.setPadding(30, 20, 30, 20);\n            delBtn.setGravity(android.view.Gravity.CENTER);\n\n            delBtn.setOnClickListener(new View.OnClickListener({\n                onClick: function () {\n                    container.removeView(itemLayout);\n                    inputItems \u003d inputItems.filter(function (item) {\n                        return item !\u003d\u003d et;\n                    });\n                }\n            }));\n            itemLayout.addView(et);\n            itemLayout.addView(delBtn);\n            container.addView(itemLayout);\n            inputItems.push(et);\n        }\n        for (var i \u003d 0; i \u003c defaultValues.length; i++) {\n            addInputItem(defaultValues[i]);\n        }\n        var addBtn \u003d new TextView(context);\n        addBtn.setText(\"＋ 新建\");\n        addBtn.setTextSize(16);\n        addBtn.setTextColor(android.graphics.Color.WHITE);\n        addBtn.setPadding(20, 20, 20, 20);\n        addBtn.setGravity(android.view.Gravity.CENTER);\n        var addBg \u003d new android.graphics.drawable.GradientDrawable();\n        addBg.setColor(android.graphics.Color.parseColor(\"#3344FF44\"));\n        addBg.setCornerRadius(20);\n        addBtn.setBackground(addBg);\n        var addParams \u003d new LinearLayout.LayoutParams(-1, -2);\n        addParams.setMargins(0, 30, 0, 10);\n        addBtn.setLayoutParams(addParams);\n        addBtn.setOnClickListener(new View.OnClickListener({\n            onClick: function () {\n                addInputItem(\"\");\n            }\n        }));\n        layout.addView(addBtn);\n        var confirmBtn \u003d new TextView(context);\n        confirmBtn.setText(\"✔ 确认\");\n        confirmBtn.setTextSize(16);\n        confirmBtn.setTextColor(android.graphics.Color.WHITE);\n        confirmBtn.setPadding(30, 20, 30, 20);\n        confirmBtn.setGravity(android.view.Gravity.CENTER);\n\n        var confirmBg \u003d new android.graphics.drawable.GradientDrawable();\n        confirmBg.setColor(android.graphics.Color.parseColor(\"#4466CCFF\"));\n        confirmBg.setCornerRadius(30);\n        confirmBtn.setBackground(confirmBg);\n        var confirmParams \u003d new LinearLayout.LayoutParams(-1, -2);\n        confirmParams.setMargins(0, 10, 0, 0);\n        confirmBtn.setLayoutParams(confirmParams);\n        confirmBtn.setOnClickListener(new View.OnClickListener({\n            onClick: function () {\n                result \u003d [];\n                for (var i \u003d 0; i \u003c inputItems.length; i++) {\n                    result.push(String(inputItems[i].getText()));\n                }\n                try { wm.removeView(layout); } catch (e) { }\n                if (callback) {\n                    callback(result);\n                }\n            }\n        }));\n        layout.addView(confirmBtn);\n        var params \u003d new android.view.WindowManager.LayoutParams(\n            dip2px(360), -2,\n            android.view.WindowManager.LayoutParams.TYPE_APPLICATION_OVERLAY,\n            android.view.WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE |\n            android.view.WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN,\n            android.graphics.PixelFormat.TRANSLUCENT\n        );\n        params.gravity \u003d android.view.Gravity.TOP;\n        wm.addView(layout, params);\n        layout.post(function () {\n            params.flags \u003d params.flags \u0026 ~android.view.WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE;\n            wm.updateViewLayout(layout, params);\n\n            if (inputItems.length \u003e 0) {\n                inputItems[0].requestFocus();\n                var imm \u003d context.getSystemService(Context.INPUT_METHOD_SERVICE);\n                imm.showSoftInput(inputItems[0], android.view.inputmethod.InputMethodManager.SHOW_IMPLICIT);\n            }\n        });\n    });\n    function dip2px(dp) {\n        var scale \u003d context.getResources().getDisplayMetrics().density;\n        return Math.floor(dp * scale + 0.7);\n    }\n}\nfunction getScreenWidth(context) {\n    var metrics \u003d new DisplayMetrics();\n    var wm \u003d context.getSystemService(Context.WINDOW_SERVICE);\n    wm.getDefaultDisplay().getMetrics(metrics);\n    return String(metrics.widthPixels);\n}\nfunction showsettingsui() {\n    var result \u003d null;\n    function runOnUiThread(fn) {\n        new Handler(Looper.getMainLooper()).post(new Runnable({ run: fn }));\n    }\n    runOnUiThread(function () {\n        try {\n            wm \u003d context.getSystemService(Context.WINDOW_SERVICE);\n            var outerLayout \u003d new LinearLayout(context);\n            outerLayout.setOrientation(LinearLayout.VERTICAL);\n            outerLayout.setBackgroundColor(android.graphics.Color.parseColor(\"#FF2E2E2E\"));\n            outerLayout.setPadding(40, 40, 40, 40);\n            var titleView \u003d new TextView(context);\n            titleView.setText(\"指令设置\");\n            titleView.setTextSize(20);\n            titleView.setTypeface(null, android.graphics.Typeface.BOLD);\n            titleView.setTextColor(android.graphics.Color.WHITE);\n            titleView.setGravity(android.view.Gravity.CENTER);\n            titleView.setPadding(0, 0, 0, 30);\n            outerLayout.addView(titleView);\n            var scrollView \u003d new ScrollView(context);\n            scrollView.setFillViewport(true);\n            scrollView.setLayoutParams(new LinearLayout.LayoutParams(-1, 0, 1));\n            var scrollContent \u003d new LinearLayout(context);\n            scrollContent.setOrientation(LinearLayout.VERTICAL);\n            scrollContent.setPadding(0, 0, 0, 0);\n            scrollView.addView(scrollContent);\n            outerLayout.addView(scrollView);\n            var menuTitles \u003d [\n                \"编辑顶级域名列表\",\n                \"编辑电子邮箱列表\",\n                \"编辑仅HTTPS可用列表\",\n                \"编辑提取码关键词列表\",\n                \"编辑黑名单关键词列表\",\n                \"浏览器黑名单列表\"\n            ];\n\n            for (var i \u003d 0; i \u003c menuTitles.length; i++) {\n                var menuLayout \u003d new LinearLayout(context);\n                menuLayout.setOrientation(LinearLayout.HORIZONTAL);\n                menuLayout.setGravity(android.view.Gravity.CENTER_VERTICAL);\n\n                var menuText \u003d new TextView(context);\n                menuText.setText(menuTitles[i]);\n                menuText.setTextSize(16);\n                menuText.setTextColor(android.graphics.Color.WHITE);\n                menuText.setTypeface(null, android.graphics.Typeface.BOLD);\n                menuText.setPadding(20, 20, 20, 20);\n                menuText.setLayoutParams(new LinearLayout.LayoutParams(0, -2, 1));\n                var arrow \u003d new TextView(context);\n                arrow.setText(\"＞\");\n                arrow.setTextSize(20);\n                arrow.setTextColor(android.graphics.Color.LTGRAY);\n                arrow.setPadding(0, 20, 20, 20);\n                menuLayout.addView(menuText);\n                menuLayout.addView(arrow);\n                var menuBg \u003d new android.graphics.drawable.GradientDrawable();\n                menuBg.setColor(android.graphics.Color.parseColor(\"#33FFFFFF\"));\n                menuBg.setCornerRadius(20);\n                menuLayout.setBackground(menuBg);\n                var menuParams \u003d new LinearLayout.LayoutParams(-1, -2);\n                menuParams.setMargins(0, 10, 0, 10);\n                menuLayout.setLayoutParams(menuParams);\n                scrollContent.addView(menuLayout);\n                (function (index) {\n                    menuLayout.setOnClickListener(new View.OnClickListener({\n                        onClick: function () {\n                            try { wm.removeView(outerLayout); } catch (e) { }\n                            var listData \u003d [\n                                config.Top_Level_Domain,\n                                config.Email_Keyword_List,\n                                config.Use_https_keyword_list,\n                                config.Extractioncode_Keyword_list,\n                                config.link_blacklist_keywords,\n                                config.Browser_PackageName_BlackList\n                            ];\n                            new Handler(Looper.getMainLooper()).post(new Runnable({\n                                run: function () {\n                                    showStringListEditor(listData[index], menuTitles[index], function (res) {\n                                        if (index \u003d\u003d\u003d 0) config.Top_Level_Domain \u003d res;\n                                        else if (index \u003d\u003d\u003d 1) config.Email_Keyword_List \u003d res;\n                                        else if (index \u003d\u003d\u003d 2) config.Use_https_keyword_list \u003d res;\n                                        else if (index \u003d\u003d\u003d 3) config.Extractioncode_Keyword_list \u003d res;\n                                        else if (index \u003d\u003d\u003d 4) config.link_blacklist_keywords \u003d res;\n                                        else if (index \u003d\u003d\u003d 5) config.Browser_PackageName_BlackList \u003d res;\n                                        showsettingsui();\n                                    });\n                                }\n                            }));\n                        }\n                    }));\n                })(i);\n            }\n            var inputs \u003d [];\n            var messagelist \u003d [\n                \"小窗配置：\\\\n竖屏高度\",\n                \"横屏高度\",\n                \"宽高比\",\n                \"竖屏左侧留空\",\n                \"横屏左侧留空\",\n                \"竖屏上侧留空\",\n                \"横屏上侧留空\",\n                \"小窗参数\",\n                \"流体云配置：\\\\n流体云位置(顶部/底部)\",\n                \"流体云位置偏移(上减下加)\",\n                \"流体云显示超时(ms)\",\n                \"其他：\\\\n浏览器(自动/包名)\",\n                \"允许出现在链接中的字符\",\n                \"显示多用户\",\n                \"显示吐司提示\",\n                \"附加插件动作(询问/小窗打开/全屏打开)\"\n            ];\n            var defaultValues \u003d config.Window_Configuration.concat([config.Launch_Windowing_Mode, config.Fluid_Cloud_Position, config.Fluid_Cloud_Position_Offset, config.Fluid_Cloud_timeout, config.browser, config.allowChar, config.show_Multiple_users, config.show_toast,config.extra_default_action]);\n            var firstInput \u003d null;\n\n            for (var i \u003d 0; i \u003c messagelist.length; i++) {\n                var label \u003d new TextView(context);\n                label.setText(messagelist[i]);\n                label.setTextColor(android.graphics.Color.LTGRAY);\n                label.setPadding(10, 15, 10, 5);\n                scrollContent.addView(label);\n                var et \u003d new EditText(context);\n                et.setHint(\"请输入内容\");\n                et.setText(String(defaultValues[i]));\n                et.setTextColor(android.graphics.Color.WHITE);\n                et.setHintTextColor(android.graphics.Color.GRAY);\n                et.setBackgroundColor(android.graphics.Color.parseColor(\"#33FFFFFF\"));\n                et.setPadding(20, 20, 20, 20);\n                et.setLayoutParams(new LinearLayout.LayoutParams(-1, -2));\n                et.setInputType(android.text.InputType.TYPE_CLASS_TEXT);\n                scrollContent.addView(et);\n                inputs.push(et);\n                if (i \u003d\u003d\u003d 0) firstInput \u003d et;\n            }\n            var confirmBtn \u003d new TextView(context);\n            confirmBtn.setText(\"确定\");\n            confirmBtn.setTextSize(16);\n            confirmBtn.setTextColor(android.graphics.Color.WHITE);\n            confirmBtn.setGravity(android.view.Gravity.CENTER);\n            confirmBtn.setPadding(30, 20, 30, 20);\n            var btnBg \u003d new android.graphics.drawable.GradientDrawable();\n            btnBg.setColor(android.graphics.Color.parseColor(\"#44FFFFFF\"));\n            btnBg.setCornerRadius(30);\n            confirmBtn.setBackground(btnBg);\n            var btnParams \u003d new LinearLayout.LayoutParams(-2, -2);\n            btnParams.gravity \u003d android.view.Gravity.END;\n            btnParams.setMargins(0, 30, 0, 0);\n            confirmBtn.setLayoutParams(btnParams);\n            outerLayout.addView(confirmBtn);\n            confirmBtn.setOnClickListener(new View.OnClickListener({\n                onClick: function () {\n                    result \u003d [];\n                    for (var i \u003d 0; i \u003c inputs.length; i++) {\n                        result.push(String(inputs[i].getText()));\n                    }\n                    config.Window_Configuration \u003d [\n                        parseInt(result[0]),\n                        parseInt(result[1]),\n                        parseFloat(result[2]),\n                        parseInt(result[3]),\n                        parseInt(result[4]),\n                        parseInt(result[5]),\n                        parseInt(result[6])];\n                    config.Launch_Windowing_Mode \u003d parseInt(result[7]);\n                    config.Fluid_Cloud_Position \u003d result[8];\n                    config.Fluid_Cloud_Position_Offset \u003d parseInt(result[9]);\n                    config.Fluid_Cloud_timeout \u003d parseInt(result[10]);\n                    config.browser \u003d result[11];\n                    config.allowChar \u003d result[12];\n                    config.show_Multiple_users \u003d ToBoolean(result[13]);\n                    config.show_toast \u003d ToBoolean(result[14]);\n                    config.extra_default_action \u003d result[15];\n                    var configPath \u003d ShortX_Path + \"/data/Fluid_Cloud/config.json\";\n                    writeConfigToFile(configPath, config, \"一.配置版本：\\\\n1.5\\\\n二.字段解释：\\\\nTop_Level_Domain：顶级域名列表\\\\nEmail_Keyword_List：邮箱关键词列表\\\\nExtractioncode_Keyword_list：提取码关键词列表\\\\nUse_https_keyword_list：仅https可用的链接关键词列表（链接无请求头时使用）\\\\nlink_blacklist_keywords：链接黑名单关键词列表(注意是链接内的关键词，不是包名)\\\\nWindow_Configuration:小窗的大小与位置配置，从左到右依次为竖屏高度 横屏高度 宽高比 竖屏左侧留空 横屏左侧留空 竖屏上侧留空 横屏上侧留空\\\\nLaunch_Windowing_Mode：可触发小窗的Windowsmode值，coloros为100(会自动识别，旧版本可能不能识别需要修改为100)，米，类原生为5\\\\nFluid_Cloud_Position：流体云显示位置（顶部，底部）\\\\nFluid_Cloud_Position_Offset:流体云位置偏移(向上偏移减小值向下偏移增加值)\\\\nFluid_Cloud_timeout：流体云显示超时时长，超过设定毫秒数无动作浮窗消失\\\\nbrowser:浏览器包名(填自动表示自动识别)\\\\nBrowser_PackageName_BlackList：浏览器黑名单，识别到的默认浏览器在黑名单内时会重新寻找其他的浏览器\\\\nallowChar:允许出现在链接中的字符\\\\nshow_Multiple_users:显示多用户应用（true 开启/false 关闭）\\\\nshow_toast:是否显示吐司提示(true 显示/false 不显示)\\\\n\\\\n三.配置：\\\\n\");\n                    try { wm.removeView(outerLayout); } catch (e) { }\n                }\n            }));\n            var params \u003d new android.view.WindowManager.LayoutParams(\n                parseInt(screenWidth * 0.9), parseInt(screenHeight * 0.6),\n                android.view.WindowManager.LayoutParams.TYPE_APPLICATION_OVERLAY,\n                android.view.WindowManager.LayoutParams.FLAG_NOT_TOUCH_MODAL |\n                android.view.WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN,\n                android.graphics.PixelFormat.TRANSLUCENT\n            );\n            params.gravity \u003d android.view.Gravity.TOP;\n            wm.addView(outerLayout, params);\n        } catch (e) { }\n    });\n}\nfunction showFileEditorUI(filePath) {\n    function runOnUiThread(fn) {\n        new Handler(Looper.getMainLooper()).post(new Runnable({ run: fn }));\n    }\n    runOnUiThread(function () {\n        var wm \u003d context.getSystemService(Context.WINDOW_SERVICE);\n\n        var layout \u003d new LinearLayout(context);\n        layout.setOrientation(LinearLayout.VERTICAL);\n        layout.setPadding(40, 40, 40, 40);\n        layout.setBackgroundColor(android.graphics.Color.parseColor(\"#FF2E2E2E\"));\n\n        var title \u003d new TextView(context);\n        title.setText(\"规则编辑器(规则在下面)\");\n        title.setTextSize(20);\n        title.setTextColor(android.graphics.Color.WHITE);\n        title.setGravity(android.view.Gravity.CENTER);\n        title.setPadding(0, 0, 0, 30);\n        layout.addView(title);\n        var scrollView \u003d new ScrollView(context);\n        var scrollParams \u003d new LinearLayout.LayoutParams(-1, dip2px(400));\n        scrollView.setLayoutParams(scrollParams);\n        var input \u003d new EditText(context);\n        input.setTextColor(android.graphics.Color.WHITE);\n        input.setHint(\"请输入内容...\");\n        input.setHintTextColor(android.graphics.Color.GRAY);\n        input.setBackgroundColor(android.graphics.Color.parseColor(\"#33FFFFFF\"));\n        input.setPadding(20, 20, 20, 20);\n        input.setMinHeight(dip2px(300));\n        input.setGravity(android.view.Gravity.TOP);\n        input.setInputType(android.text.InputType.TYPE_CLASS_TEXT | android.text.InputType.TYPE_TEXT_FLAG_MULTI_LINE);\n        input.setSingleLine(false);\n        input.setHorizontallyScrolling(false);\n        try {\n            var f \u003d new java.io.File(filePath);\n            if (f.exists()) {\n                var br \u003d new java.io.BufferedReader(new java.io.FileReader(f));\n                var sb \u003d new java.lang.StringBuilder();\n                var line;\n                while ((line \u003d br.readLine()) !\u003d null) {\n                    sb.append(line).append(\"\\\\n\");\n                }\n                br.close();\n                input.setText(sb.toString());\n            }\n        } catch (e) {\n            input.setText(\"\");\n        }\n        scrollView.addView(input);\n        layout.addView(scrollView);\n        var btnLayout \u003d new LinearLayout(context);\n        btnLayout.setOrientation(LinearLayout.HORIZONTAL);\n        btnLayout.setGravity(android.view.Gravity.END);\n        function makeBtn(text, bgColor, callback) {\n            var btn \u003d new TextView(context);\n            btn.setText(text);\n            btn.setTextColor(android.graphics.Color.WHITE);\n            btn.setTextSize(16);\n            btn.setPadding(40, 20, 40, 20);\n            btn.setGravity(android.view.Gravity.CENTER);\n            var bg \u003d new android.graphics.drawable.GradientDrawable();\n            bg.setColor(android.graphics.Color.parseColor(bgColor));\n            bg.setCornerRadius(20);\n            btn.setBackground(bg);\n            btn.setOnClickListener(new View.OnClickListener({ onClick: callback }));\n            var params \u003d new LinearLayout.LayoutParams(-2, -2);\n            params.setMargins(20, 40, 0, 0);\n            btn.setLayoutParams(params);\n            return btn;\n        }\n        var cancelBtn \u003d makeBtn(\"取消\", \"#FF555555\", function () {\n            try { wm.removeView(layout); } catch (e) { }\n        });\n        var saveBtn \u003d makeBtn(\"保存\", \"#FF3399FF\", function () {\n            try {\n                var writer \u003d new java.io.FileWriter(filePath, false);\n                writer.write(String(input.getText()));\n                writer.close();\n            } catch (e) { showToast(\"保存失败\") }\n            try { wm.removeView(layout); } catch (e) { console.log(\"移除识图时出现错误：\" + e.message) }\n        });\n        btnLayout.addView(cancelBtn);\n        btnLayout.addView(saveBtn);\n        layout.addView(btnLayout);\n        var params \u003d new android.view.WindowManager.LayoutParams(\n            dip2px(360), -2,\n            android.view.WindowManager.LayoutParams.TYPE_APPLICATION_OVERLAY,\n            android.view.WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE |\n            android.view.WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN,\n            android.graphics.PixelFormat.TRANSLUCENT\n        );\n        params.gravity \u003d android.view.Gravity.TOP;\n        wm.addView(layout, params);\n        layout.post(function () {\n            params.flags \u003d params.flags \u0026 ~android.view.WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE;\n            wm.updateViewLayout(layout, params);\n            input.requestFocus();\n            var imm \u003d context.getSystemService(Context.INPUT_METHOD_SERVICE);\n            imm.showSoftInput(input, android.view.inputmethod.InputMethodManager.SHOW_IMPLICIT);\n        });\n    });\n    function dip2px(dp) {\n        var scale \u003d context.getResources().getDisplayMetrics().density;\n        return Math.floor(dp * scale + 0.5);\n    }\n}\n\n\nfunction getOpenApps(url, userId) {\n    var intent \u003d new Intent(Intent.ACTION_VIEW);\n    intent.setData(Uri.parse(url));\n    var type \u003d null;\n    var flags \u003d PackageManager.MATCH_DEFAULT_ONLY;\n    try {\n        var binder \u003d ServiceManager.getService(\"package\");\n        var iPm \u003d IPackageManager$Stub.asInterface(binder);\n        var resolveListSlice \u003d iPm.queryIntentActivities(intent, type, flags, userId);\n        var resolveList \u003d resolveListSlice.getList();\n        var packages \u003d [];\n        for (var i \u003d 0; i \u003c resolveList.size(); i++) {\n            var resolveInfo \u003d resolveList.get(i);\n            if (resolveInfo.activityInfo !\u003d null) {\n                var pkg \u003d resolveInfo.activityInfo.packageName;\n                if (pkg !\u003d\u003d RealDefaultBrowser) {\n                    packages.push(String(pkg));\n                }\n            }\n        }\n        if (packages.length \u003d\u003d\u003d 0 \u0026\u0026 RealDefaultBrowser !\u003d null) {\n            packages.push(String(defaultBrowser));\n        }\n        return packages;\n    } catch (e) {\n        console.log(\"获取用户 \" + userId + \" 的可打开应用失败: \" + e);\n        return [String(defaultBrowser)];\n    }\n}\n\nfunction getScreenWidth(context) {\n    var metrics \u003d new DisplayMetrics();\n    var wm \u003d context.getSystemService(Context.WINDOW_SERVICE);\n    wm.getDefaultDisplay().getMetrics(metrics);\n    return String(metrics.widthPixels);\n}\n\nfunction findbrowser() {\n    var pm \u003d context.getPackageManager();\n    var apps \u003d pm.getInstalledApplications(0);\n    var testUri \u003d Uri.parse(\"http://www.example.com\");\n    for (var i \u003d 0; i \u003c apps.size(); i++) {\n        var pkg \u003d apps.get(i).packageName;\n        var intent \u003d new Intent(Intent.ACTION_VIEW, testUri);\n        intent.setPackage(pkg);\n        intent.addCategory(Intent.CATEGORY_BROWSABLE);\n        var resolvedActivity \u003d pm.resolveActivity(intent, 0);\n\n        if (resolvedActivity !\u003d null \u0026\u0026 resolvedActivity.activityInfo !\u003d null \u0026\u0026 !Browser_PackageName_BlackList.includes(String(pkg))) {\n            return String(pkg);\n        }\n    }\n    return false;\n}\n\nfunction getDefaultBrowserPackageName(context) {\n    var intent \u003d new Intent(Intent.ACTION_VIEW);\n    intent.setData(Uri.parse(\"http://\"));\n    var pm \u003d context.getPackageManager();\n    var resolveInfo \u003d pm.resolveActivity(intent, 65536);\n\n    if (resolveInfo !\u003d null \u0026\u0026 resolveInfo.activityInfo !\u003d null) {\n        var browserPackageName \u003d String(resolveInfo.activityInfo.packageName);\n        if (Browser_PackageName_BlackList.includes(browserPackageName)) {\n            browserPackageName \u003d findbrowser();\n            if (browserPackageName \u003d\u003d\u003d false) {\n                throw new Error(\"默认浏览器未设置且未找到浏览器，请前往设置中设置默认浏览器\");\n            } else {\n                return browserPackageName;\n            }\n        } else {\n            return browserPackageName;\n        }\n    } else {\n        var browserPackageName \u003d findbrowser();\n        if (browserPackageName \u003d\u003d\u003d false) {\n            throw new Error(\"默认浏览器未设置且未找到浏览器，请前往设置中设置默认浏览器\");\n        } else {\n            return browserPackageName;\n        }\n    }\n}\n\n\nfunction showFloatingPrompt(opts) {\n    var result \u003d null;\n    var timeout \u003d opts.timeout || 3000;\n    function runOnUiThread(fn) {\n        new Handler(Looper.getMainLooper()).post(new Runnable({ run: fn }));\n    }\n    runOnUiThread(function () {\n        var wm \u003d context.getSystemService(Context.WINDOW_SERVICE);\n        var pm \u003d context.getPackageManager();\n        var layout \u003d new LinearLayout(context);\n        layout.setOrientation(LinearLayout.HORIZONTAL);\n        layout.setPadding(30, 30, 30, 30);\n        layout.setGravity(Gravity.CENTER_VERTICAL);\n        var bg \u003d new GradientDrawable();\n        bg.setColor(Color.parseColor(\"#DD1F1F1F\"));\n        bg.setCornerRadius(60);\n        layout.setBackground(bg);\n        var iconView \u003d new ImageView(context);\n        var iconSize \u003d 130;\n        var iconParams \u003d new LinearLayout.LayoutParams(iconSize, iconSize);\n        iconParams.setMargins(0, 0, 30, 0);\n        iconView.setLayoutParams(iconParams);\n        try {\n            var userId \u003d opts.userId || 0;\n            var userHandle \u003d UserHandle.of(userId);\n            var userContext \u003d context.createPackageContextAsUser(opts.pkg, 0, userHandle);\n            var userPm \u003d userContext.getPackageManager();\n            var icon \u003d userPm.getApplicationIcon(opts.pkg);\n            iconView.setImageDrawable(icon);\n        } catch (e) {\n            console.log(\"获取图标失败: \" + e);\n            iconView.setImageResource(android.R.drawable.sym_def_app_icon);\n        }\n        layout.addView(iconView);\n        var textLayout \u003d new LinearLayout(context);\n        textLayout.setOrientation(LinearLayout.VERTICAL);\n        textLayout.setLayoutParams(new LinearLayout.LayoutParams(0, -2, 1));\n        var title \u003d new TextView(context);\n        title.setText(opts.title || \"打开应用\");\n        title.setTextSize(18);\n        title.setTypeface(null, android.graphics.Typeface.BOLD);\n        title.setTextColor(Color.WHITE);\n        var subtitle \u003d new TextView(context);\n        subtitle.setText(opts.subtitle || \"\");\n        subtitle.setTextSize(14);\n        subtitle.setTextColor(Color.LTGRAY);\n        textLayout.addView(title);\n        textLayout.addView(subtitle);\n        layout.addView(textLayout);\n        var btn \u003d new TextView(context);\n        btn.setText(opts.buttonText || \"浮窗打开\");\n        btn.setTextSize(14);\n        btn.setTextColor(Color.WHITE);\n        btn.setGravity(Gravity.CENTER);\n        btn.setPadding(30, 20, 30, 20);\n        var btnBg \u003d new GradientDrawable();\n        btnBg.setColor(Color.parseColor(\"#44FFFFFF\"));\n        btnBg.setCornerRadius(60);\n        btn.setBackground(btnBg);\n        var btnParams \u003d new LinearLayout.LayoutParams(-2, -2);\n        btnParams.setMargins(30, 0, 0, 0);\n        btn.setLayoutParams(btnParams);\n        layout.addView(btn);\n        layout.setOnClickListener(new View.OnClickListener({\n            onClick: function () {\n                result \u003d opts.resultOnClick || \"click\";\n                try { wm.removeView(layout); } catch (e) { }\n            }\n        }));\n        btn.setOnClickListener(new View.OnClickListener({\n            onClick: function () {\n                result \u003d opts.resultOnButton || \"button\";\n                try { wm.removeView(layout); } catch (e) { }\n            }\n        }));\n        var downY \u003d 0;\n        layout.setOnTouchListener(new View.OnTouchListener({\n            onTouch: function (v, event) {\n                switch (event.getAction()) {\n                    case MotionEvent.ACTION_DOWN:\n                        downY \u003d event.getRawY();\n                        return false;\n                    case MotionEvent.ACTION_UP:\n                        var upY \u003d event.getRawY();\n                        if (downY - upY \u003e 100) {\n                            result \u003d opts.resultOnSwipe || \"swipe_close\";\n                            try { wm.removeView(layout); } catch (e) { }\n                            return true;\n                        } else if (upY - downY \u003e 100) {\n                            result \u003d opts.resultOnSwipeDown || \"swipe_down\";\n                            try { wm.removeView(layout); } catch (e) { }\n                            return true;\n                        }\n                        return false;\n                }\n                return false;\n            }\n        }));\n        var params \u003d new WindowManager.LayoutParams(\n            parseInt(getScreenWidth(context) * 0.9), -2,\n            WindowManager.LayoutParams.TYPE_APPLICATION_OVERLAY,\n            WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE | WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN,\n            PixelFormat.TRANSLUCENT\n        );\n        params.gravity \u003d opts.gravity || (Gravity.BOTTOM | Gravity.CENTER_HORIZONTAL);\n        params.x \u003d opts.x || 0;\n        params.y \u003d opts.y || 150;\n        wm.addView(layout, params);\n\n        new Thread(new Runnable({\n            run: function () {\n                Thread.sleep(timeout);\n                runOnUiThread(function () {\n                    if (result \u003d\u003d\u003d null) {\n                        result \u003d opts.resultOnTimeout || \"timeout\";\n                        try { wm.removeView(layout); } catch (e) { }\n                    }\n                });\n            }\n        })).start();\n    });\n    while (result \u003d\u003d\u003d null) {\n        Thread.sleep(150);\n    }\n    return result;\n}\n\n\nfunction showOptionsDialog(options, titleText) {\n    var result \u003d null;\n    function runOnUiThread(fn) {\n        new Handler(Looper.getMainLooper()).post(new Runnable({ run: fn }));\n    }\n    runOnUiThread(function () {\n        var pm \u003d context.getPackageManager();\n        var wm \u003d context.getSystemService(Context.WINDOW_SERVICE);\n        var layout \u003d new FrameLayout(context);\n        var isDarkMode \u003d (context.getResources().getConfiguration().uiMode\n            \u0026 android.content.res.Configuration.UI_MODE_NIGHT_MASK)\n            \u003d\u003d\u003d android.content.res.Configuration.UI_MODE_NIGHT_YES;\n        var shape \u003d new GradientDrawable();\n        var backgroundColor \u003d isDarkMode ? \"#343434\" : \"#FAFAFA\";\n        var textColor \u003d isDarkMode ? Color.WHITE : Color.BLACK;\n        shape.setColor(Color.parseColor(backgroundColor));\n        shape.setCornerRadius(30);\n        if (!isDarkMode) shape.setStroke(2, Color.parseColor(\"#22000000\"));\n        layout.setBackground(shape);\n        var displayMetrics \u003d context.getResources().getDisplayMetrics();\n        var maxWidth \u003d displayMetrics.widthPixels * 0.8;\n        var maxHeight \u003d displayMetrics.heightPixels * 0.6;\n        var params \u003d new WindowManager.LayoutParams(\n            WindowManager.LayoutParams.WRAP_CONTENT,\n            WindowManager.LayoutParams.WRAP_CONTENT,\n            WindowManager.LayoutParams.TYPE_APPLICATION_OVERLAY,\n            WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE | WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN,\n            PixelFormat.TRANSLUCENT\n        );\n        params.gravity \u003d Gravity.CENTER;\n        params.width \u003d maxWidth;\n        var scrollView \u003d new ScrollView(context);\n        var scrollParams \u003d new FrameLayout.LayoutParams(\n            FrameLayout.LayoutParams.MATCH_PARENT,\n            FrameLayout.LayoutParams.WRAP_CONTENT\n        );\n        scrollView.setLayoutParams(scrollParams);\n        var container \u003d new LinearLayout(context);\n        container.setOrientation(LinearLayout.VERTICAL);\n        var titleView \u003d new TextView(context);\n        titleView.setText(titleText || \"请选择\");\n        titleView.setTextSize(20);\n        titleView.setTextColor(textColor);\n        titleView.setGravity(Gravity.CENTER);\n        titleView.setTypeface(null, android.graphics.Typeface.BOLD);\n        titleView.setPadding(40, 40, 40, 20);\n        container.addView(titleView);\n\n        scrollView.addView(container);\n        layout.addView(scrollView);\n\n        scrollView.post(new Runnable({\n            run: function () {\n                if (scrollView.getHeight() \u003e maxHeight) {\n                    var newParams \u003d scrollView.getLayoutParams();\n                    newParams.height \u003d maxHeight;\n                    scrollView.setLayoutParams(newParams);\n                }\n            }\n        }));\n        function makeOptionView(item) {\n            if (typeof item \u003d\u003d\u003d \"string\") {\n                var simpleLayout \u003d new LinearLayout(context);\n                simpleLayout.setOrientation(LinearLayout.VERTICAL);\n                simpleLayout.setPadding(30, 30, 30, 30);\n                var labelView \u003d new TextView(context);\n                labelView.setText(item);\n                labelView.setTextSize(16);\n                labelView.setTextColor(textColor);\n                simpleLayout.addView(labelView);\n\n                simpleLayout.setOnClickListener(new View.OnClickListener({\n                    onClick: function () {\n                        result \u003d item;\n                        try { wm.removeView(layout); } catch (e) { }\n                    }\n                }));\n                return simpleLayout;\n            }\n            var itemLayout \u003d new LinearLayout(context);\n            itemLayout.setOrientation(LinearLayout.HORIZONTAL);\n            itemLayout.setPadding(30, 30, 30, 30);\n            itemLayout.setGravity(Gravity.CENTER_VERTICAL);\n\n            var iconView \u003d new ImageView(context);\n            var iconSize \u003d 96;\n            var iconParams \u003d new LinearLayout.LayoutParams(iconSize, iconSize);\n            iconParams.setMargins(0, 0, 30, 0);\n            iconView.setLayoutParams(iconParams);\n            if (item.pkg) {\n                try {\n                    var userId \u003d item.userId || 0;\n                    var userHandle \u003d UserHandle.of(userId);\n                    var userContext \u003d context.createPackageContextAsUser(item.pkg, 0, userHandle);\n                    var userPm \u003d userContext.getPackageManager();\n                    var icon \u003d userPm.getApplicationIcon(item.pkg);\n                    iconView.setImageDrawable(icon);\n                } catch (e) {\n                    console.log(\"获取图标失败: \" + e);\n                    iconView.setImageResource(android.R.drawable.sym_def_app_icon);\n                }\n                itemLayout.addView(iconView);\n            } else if (item.icon) {\n                var emoji \u003d new TextView(context);\n                emoji.setText(item.icon);\n                emoji.setTextSize(20);\n                emoji.setLayoutParams(iconParams);\n                itemLayout.addView(emoji);\n            } else {\n                iconView.setImageResource(android.R.drawable.sym_def_app_icon);\n                itemLayout.addView(iconView);\n            }\n\n            var textLayout \u003d new LinearLayout(context);\n            textLayout.setOrientation(LinearLayout.VERTICAL);\n\n            var title \u003d new TextView(context);\n            title.setText(item.label || item.value || \"未命名\");\n            title.setTextSize(16);\n            title.setTextColor(textColor);\n            var desc \u003d new TextView(context);\n            desc.setText(item.desc || \"\");\n            desc.setTextSize(13);\n            desc.setTextColor(isDarkMode ? Color.LTGRAY : Color.DKGRAY);\n\n            textLayout.addView(title);\n            textLayout.addView(desc);\n            itemLayout.addView(textLayout);\n\n            itemLayout.setOnClickListener(new View.OnClickListener({\n                onClick: function () {\n                    result \u003d item.value;\n                    try { wm.removeView(layout); } catch (e) { }\n                }\n            }));\n            return itemLayout;\n        }\n        for (var i \u003d 0; i \u003c options.length; i++) {\n            container.addView(makeOptionView(options[i]));\n        }\n        try {\n            wm.addView(layout, params);\n        } catch (e) {\n            result \u003d null;\n        }\n    });\n    while (result \u003d\u003d\u003d null) {\n        Thread.sleep(150);\n    }\n    return result;\n}\n\n\nfunction RecordCopiedText(CopiedText) {\n    writeConfigToFile(ShortX_Path + \"/data/Fluid_Cloud/recordcopy.json\", { \"CopiedText\": CopiedText }, \"\");\n}\n\n\nfunction removeRequestHead(link) {\n    var r \u003d link.replace(\"http://\", \"\").replace(\"https://\", \"\");\n    r \u003d r.split(\" \")[0];\n    return r;\n}\n\n\nfunction Compare(a, output) {\n    for (var i \u003d 0; i \u003c output.length; i++) {\n        if (removeRequestHead(output[i]) \u003d\u003d\u003d removeRequestHead(a)) {\n            return false;\n        }\n    }\n    return true;\n}\n\n\nfunction where(list, value_to_find) {\n    var result \u003d [];\n    for (var i \u003d 0; i \u003c list.length; i++) {\n        if (removeRequestHead(list[i]) \u003d\u003d\u003d removeRequestHead(value_to_find)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\n\nfunction RollBackToFind(list, value_to_find, list_to_find, cleanCode) {\n    var indices \u003d where(list, value_to_find);\n    for (var i \u003d 0; i \u003c indices.length; i++) {\n        var pos \u003d indices[i];\n        for (var j \u003d pos - 1; j \u003e\u003d 0; j--) {\n            if (!Compare(list[j], list_to_find)) {\n                if (list[j].split(\" \").length \u003c 2) {\n                    var ExtractionCode \u003d cleanCode;\n                    if (!ExtractionCode || ExtractionCode \u003d\u003d\u003d \"\") {\n                        ExtractionCode \u003d list[pos + 1].replace(/[^a-zA-Z0-9]/g, \"\");\n                    }\n                    var outputIndices \u003d where(list_to_find, list[j]);\n                    if (outputIndices.length \u003e 0) {\n                        if (!list_to_find[outputIndices[0]].includes(\"提取码:\")) {\n                            list_to_find[outputIndices[0]] \u003d list[j] + \" 提取码:\" + ExtractionCode;\n                        } else {\n                            list_to_find.push(String(list[j] + \" 提取码:\" + ExtractionCode));\n                        }\n                        break;\n                    }\n                }\n            }\n        }\n    }\n}\n\n\nfunction removeDisallowedChar(text, allowchar) {\n    var escapedAllowChar \u003d allowchar.replace(/[-[\\\\]/{}()*+?.\\\\\\\\^$|]/g, \"\\\\\\\\$\u0026\");\n    var allowRegex \u003d new RegExp(\u0027[^\u0027 + escapedAllowChar.split(\u0027\u0027).join(\u0027\u0027) + \u0027]\u0027, \u0027g\u0027);\n    for (var i \u003d 0; i \u003c Extractioncode_Keyword_list.length; i++) {\n        text \u003d text.replace(new RegExp(Extractioncode_Keyword_list[i], \"g\"), \" Extractioncode:\");\n    }\n    text \u003d text.replace(/\\\\[[^\\\\]]*\\\\]/g, \"\").trim();\n    text \u003d text.replace(allowRegex, \u0027\u0027);\n    return text.trim();\n}\n\n\nfunction ScreeningParagraphs(a) {\n    a \u003d a.replace(/http:\\\\/\\\\//g, \" http://\").replace(/https:\\\\/\\\\//g, \" https://\");\n    var Paragraph \u003d a.split(/\\\\n|,|，|；|;|\\\\s+/);\n    Paragraph \u003d Paragraph.filter(function (token) { return token.trim() !\u003d\u003d \"\"; });\n    var output \u003d [];\n    var candidateLinks \u003d [];\n    var withExtractionCode \u003d false;\n    var ExtractionCodeList \u003d [];\n    if (a.includes(\"Extractioncode:\")) {\n        withExtractionCode \u003d true;\n        for (var i \u003d 0; i \u003c Paragraph.length; i++) {\n            if (Paragraph[i].includes(\"Extractioncode:\")) {\n                var raw \u003d Paragraph[i];\n                var match \u003d Paragraph[i].match(/Extractioncode:([A-Za-z0-9]+)/);\n                var clean \u003d match ? match[1] : \"\";\n                ExtractionCodeList.push({ raw: raw, clean: clean });\n            }\n        }\n    }\n    for (var i \u003d 0; i \u003c Top_Level_Domain.length; i++) {\n        for (var j \u003d 0; j \u003c Paragraph.length; j++) {\n            if (Paragraph[j].includes(\".\" + Top_Level_Domain[i] + \"/\") \u0026\u0026 Paragraph[j].length \u003e Top_Level_Domain[i].length + 2) {\n                if (Compare(Paragraph[j], output)) {\n                    output.push(Paragraph[j]);\n                }\n            } else if (Compare(Paragraph[j], candidateLinks)) {\n                candidateLinks.push(Paragraph[j]);\n            }\n        }\n    }\n    for (var i \u003d 0; i \u003c Top_Level_Domain.length; i++) {\n        for (var j \u003d 0; j \u003c candidateLinks.length; j++) {\n            if (candidateLinks[j].includes(\".\" + Top_Level_Domain[i]) \u0026\u0026 candidateLinks[j].length \u003e Top_Level_Domain[i].length + 1) {\n                var suffix \u003d \".\" + Top_Level_Domain[i];\n                if (candidateLinks[j].substr(candidateLinks[j].length - suffix.length) \u003d\u003d\u003d suffix) {\n                    if (Compare(candidateLinks[j], output)) {\n                        var isEmail \u003d false;\n                        for (var w \u003d 0; w \u003c Email_Keyword_List.length; w++) {\n                            if (candidateLinks[j].includes(\"@\" + Email_Keyword_List[w])) {\n                                isEmail \u003d true;\n                                break;\n                            }\n                        }\n                        if (!isEmail) {\n                            output.push(candidateLinks[j]);\n                        }\n                    }\n                }\n            } else if ((candidateLinks[j].includes(\"http://\") || candidateLinks[j].includes(\"https://\")) \u0026\u0026 candidateLinks[j].length \u003e 8 \u0026\u0026 candidateLinks[j].includes(\".\")) {\n                if (Compare(candidateLinks[j], output)) {\n                    output.push(candidateLinks[j]);\n                }\n            }\n        }\n    }\n    if (withExtractionCode) {\n        for (var i \u003d 0; i \u003c ExtractionCodeList.length; i++) {\n            RollBackToFind(Paragraph, ExtractionCodeList[i].raw, output, ExtractionCodeList[i].clean);\n        }\n    }\n    return output;\n}\n\n\nfunction AddRequestHead(linkList) {\n    var output \u003d [];\n    for (var i \u003d 0; i \u003c linkList.length; i++) {\n        var link \u003d linkList[i];\n        if (!link.includes(\"http://\") \u0026\u0026 !link.includes(\"https://\")) {\n            var httpLink \u003d \"http://\" + link;\n            var httpsLink \u003d \"https://\" + link;\n            if (!output.includes(httpLink) \u0026\u0026 !output.includes(httpsLink)) {\n                var useHttps \u003d false;\n                for (var j \u003d 0; j \u003c Use_https_keyword_list.length; j++) {\n                    if (link.includes(Use_https_keyword_list[j])) {\n                        useHttps \u003d true;\n                        break;\n                    }\n                }\n                output.push(useHttps ? String(httpsLink) : String(httpLink));\n            }\n        } else if (!output.includes(link)) {\n            output.push(String(link));\n        }\n    }\n    return output;\n}\n\n\nfunction cleanLinksInBlackList(linkList) {\n    for (var i \u003d 0; i \u003c link_blacklist_keywords.length; i++) {\n        for (var j \u003d 0; j \u003c linkList.length; j++) {\n            if (linkList[j].includes(link_blacklist_keywords[i])) {\n                linkList.splice(j, 1);\n                j--;\n            }\n        }\n    }\n    return linkList;\n}\n\n\nfunction RecognitionMain(a) {\n    return cleanLinksInBlackList(AddRequestHead(ScreeningParagraphs(removeDisallowedChar(a, allowChar + \" \\\\n\"))));\n}\n\n\nfunction getAppName(packageName, userId) {\n    var pm \u003d context.getPackageManager();\n    try {\n        var appInfo \u003d pm.getApplicationInfoAsUser(packageName, 0, userId);\n        var appName \u003d pm.getApplicationLabel(appInfo).toString();\n        if (userId !\u003d\u003d 0) {\n            return appName + \"(\" + userId + \")\"\n        }\n        return appName;\n    } catch (e) {\n        console.log(\"获取应用名失败: \" + e);\n        return \"****\";\n    }\n}\n\n\n\nvar APPList_cache \u003d {};\nfunction getAppList(userId) {\n    var cachelist \u003d Object.keys(APPList_cache);\n    if (cachelist \u003d\u003d undefined) cachelist \u003d [];\n    if (cachelist.includes(userId)) {\n        return APPList_cache[userId];\n    }\n    var pm \u003d context.getPackageManager();\n    var result \u003d [];\n    try {\n        var apps \u003d pm.getInstalledApplicationsAsUser(PackageManager.GET_META_DATA, userId);\n        for (var i \u003d 0; i \u003c apps.size(); i++) {\n            result.push(String(apps.get(i).packageName));\n        }\n    } catch (e) {\n        console.log(\"获取包名列表失败: \" + e);\n    }\n    APPList_cache[userId] \u003d result;\n    return result;\n}\n\nfunction getAllUserIds() {\n    if (show_Multiple_users) {\n        try {\n            var userManager \u003d context.getSystemService(\"user\");\n            var users \u003d userManager.getUsers();\n            var result \u003d [];\n            for (var i \u003d 0; i \u003c users.size(); i++) {\n                var userInfo \u003d users.get(i);\n                result.push(parseInt(userInfo.id));\n            }\n            return result;\n        } catch (e) {\n            console.log(\"获取用户列表失败: \" + e);\n            return [0];\n        }\n    } else {\n        return [0];\n    }\n}\n\n\nfunction isAppinstall(pkgName, UserId) {\n    return getAppList(UserId).includes(pkgName);\n}\n\n\nfunction isKeyInOblist(objectlist, key, value) {\n    var qvc \u003d objectlist.some(function (item) {\n        return item[key] \u003d\u003d\u003d value;\n    }); return qvc;\n}\n\nfunction isKeyPairInOblist(objectlist, key1, value1, key2, value2) {\n    var result \u003d objectlist.some(function (item) {\n        return item[key1] \u003d\u003d\u003d value1 \u0026\u0026 item[key2] \u003d\u003d\u003d value2;\n    });\n    return result;\n}\n\n\nfunction getAppOpenActivities(url, targetPackage, userId) {\n    try {\n        var intent \u003d new Intent(Intent.ACTION_VIEW);\n        intent.setData(Uri.parse(url));\n        var resolvedType \u003d null;\n        var flags \u003d PackageManager.MATCH_DEFAULT_ONLY;\n        var binder \u003d ServiceManager.getService(\"package\");\n        var iPm \u003d IPackageManager$Stub.asInterface(binder);\n        var resolveSlice \u003d iPm.queryIntentActivities(intent, resolvedType, flags, userId);\n        var resolveInfos \u003d resolveSlice.getList();\n\n        for (var i \u003d 0; i \u003c resolveInfos.size(); i++) {\n            var ri \u003d resolveInfos.get(i);\n            if (ri.activityInfo !\u003d null \u0026\u0026 String(ri.activityInfo.packageName) \u003d\u003d\u003d targetPackage) {\n                return String(ri.activityInfo.name);\n            }\n        }\n    } catch (e) {\n        console.log(\"查询用户 \" + userId + \" 的 activity 失败: \" + e);\n    }\n\n    return null;\n}\n\nfunction pkgCheck(pkg) {\n    var result \u003d { pass: false, result: [] };\n    if (pkg.includes(\"://\")) {\n        for (var i \u003d 0; i \u003c UserIds.length; i++) {\n            var Apps \u003d getOpenApps(pkg, UserIds[i]);\n            var fakebrowserapp \u003d getOpenApps(\"http://example.com\",UserIds[i])\n            if (!Apps.includes(defaultBrowser)) {\n                for (var j \u003d 0; j \u003c Apps.length; j++) {\n                    if(!Apps[j].includes(fakebrowserapp)){\n                        result[\"result\"].push({ packageName: Apps[j], UserId: UserIds[i] });\n                    }\n                }\n                if(result.result.length!\u003d0) result[\"pass\"] \u003d true;\n            }\n        }\n    } else {\n        for (var i \u003d 0; i \u003c UserIds.length; i++) {\n            if (isAppinstall(pkg, UserIds[i])) {\n                result[\"pass\"] \u003d true;\n                result[\"result\"].push({ packageName: pkg, UserId: UserIds[i] });\n            }\n        }\n    }\n    return result;\n}\n\nfunction findVariable(text) {\n    if (text \u003d\u003d undefined) return [];\n    var results \u003d [];\n    var start \u003d -1;\n    var depth \u003d 0;\n    for (var i \u003d 0; i \u003c text.length; i++) {\n        var ch \u003d text.charAt(i);\n        if (ch \u003d\u003d\u003d \"【\") {\n            if (depth \u003d\u003d\u003d 0) start \u003d i;\n            depth++;\n        } else if (ch \u003d\u003d\u003d \"】\") {\n            depth--;\n            if (depth \u003d\u003d\u003d 0 \u0026\u0026 start !\u003d\u003d -1) {\n                var inner \u003d text.substring(start + 1, i);\n                results.push(inner);\n                start \u003d -1;\n            }\n        }\n    }\n    return results;\n}\nvar regexCache \u003d {};\n\nfunction getRegex(pattern, flags) {\n    var key \u003d pattern + \"/\" + (flags || \"\");\n    if (!regexCache[key]) {\n        regexCache[key] \u003d new RegExp(pattern, flags);\n    }\n    return regexCache[key];\n}\n\n\nfunction containsMatch(text, pattern) {\n    return getRegex(pattern, \"i\").test(text);\n}\n\n\nfunction replaceAll(text, target, replacement) {\n    return text.replace(getRegex(target, \"g\"), replacement);\n}\n\n\nfunction buildKeyValueMap(list, key) {\n    var map \u003d {};\n    for (var i \u003d 0; i \u003c list.length; i++) {\n        map[list[i][key]] \u003d list[i];\n    }\n    return map;\n}\n\n\nfunction buildValueSet(list, key) {\n    var set \u003d {};\n    for (var i \u003d 0; i \u003c list.length; i++) {\n        set[list[i][key]] \u003d true;\n    }\n    return set;\n}\n\nfunction islistinstr(str, strlist) {\n    for (var i \u003d 0; i \u003c strlist.length; i++) {\n        if (containsMatch(str, strlist[i])) {\n            return true;\n        }\n    }\n    return false;\n}\n\n\nfunction findObjectByKeyValue(list, key, value) {\n    return list.find(function (item) {\n        return item[key] \u003d\u003d\u003d value;\n    });\n}\n\nfunction getValuesFromObjectArray(objArray, key) {\n    var result \u003d objArray.map(function (item) {\n        return item[key];\n    });\n    return result;\n}\n\nfunction SynthesisRule(VariableList, inputvalue) {\n    var output \u003d inputvalue;\n    if (output \u003d\u003d\u003d undefined) return null;\n    var variableNames \u003d buildValueSet(VariableList, \"name\");\n\n    var Variables \u003d findVariable(output);\n    for (var j \u003d 0; j \u003c Variables.length; j++) {\n        if (variableNames[Variables[j]]) {\n            output \u003d replaceAll(output, \"【\" + Variables[j] + \"】\", findObjectByKeyValue(VariableList, \"name\", Variables[j]).value);\n            findObjectByKeyValue(VariableList, \"name\", Variables[j]).count++;\n        }\n    }\n\n    return output;\n}\n\n\nfunction getVariablevalues(text, VariableList, object) {\n    var results \u003d findVariable(text);\n    if (results \u003d\u003d\u003d undefined) return VariableList;\n    var variableNames \u003d buildValueSet(VariableList, \"name\");\n\n    for (var i \u003d 0; i \u003c results.length; i++) {\n        if (!variableNames[results[i]]) {\n            if (results[i]) {\n                var Variableobject \u003d findObjectByKeyValue(object.Custom_variable, \"name\", results[i]);\n                if (!Variableobject) {\n                    showToast(\"规则错误：自定义变量：\" + results[i] + \"未定义\");\n                    continue;\n                }\n            }\n            var issuccess \u003d true;\n            if (typeof Variableobject.action \u003d\u003d\u003d \"string\") {\n                var action \u003d Variableobject.action;\n            } else {\n                var action \u003d \"match\";\n            }\n            if (action !\u003d\u003d \"splicing\") {\n                var sourse_text \u003d Variableobject.text;\n                if (!variableNames[sourse_text]) {\n                    VariableList \u003d getVariablevalues(\"【\" + sourse_text + \"】\", VariableList, object);\n                }\n            }\n            if (action \u003d\u003d\u003d \"match\") {\n                var a \u003d findObjectByKeyValue(VariableList, \"name\", sourse_text).value.match(getRegex(Variableobject.pattern));\n                if (a !\u003d\u003d null) {\n                    if (typeof Variableobject.index !\u003d\u003d \"number\") Variableobject.index \u003d 1;\n                    VariableList.push({ name: results[i], value: a[Variableobject.index], count: 0 });\n                } else {\n                    issuccess \u003d false;\n                }\n            } else if (action \u003d\u003d\u003d \"replace\") {\n                VariableList.push({ name: results[i], value: replaceAll(findObjectByKeyValue(VariableList, \"name\", sourse_text).value, Variableobject.pattern, Variableobject.replacement), count: 0 });\n            } else if (action \u003d\u003d\u003d \"splicing\") {\n                var valuetext \u003d Variableobject.valuetext;\n                VariableList.push({ name: results[i], value: SynthesisRule(getVariablevalues(valuetext, VariableList, object), valuetext), count: 0 });\n            }\n\n            if (!issuccess) {\n                VariableList.push({ name: results[i], value: \"\", count: 0 });\n                showToast(object.name + \"规则\" + results[i] + \"字段匹配失败,规则可能已过期\");\n            }\n        }\n    }\n    return VariableList;\n}\n\n\n\n\n\nfunction isconditionpass(condition, withcode, VariableList) {\n    var condition_type \u003d condition.condition_type;\n    if (condition_type \u003d\u003d\u003d \"withcode\") return withcode;\n    else if (condition_type \u003d\u003d\u003d \"withoutcode\") return !withcode;\n    else if (condition_type \u003d\u003d\u003d \"contains\") {\n        return containsMatch(findObjectByKeyValue(VariableList, \"name\", condition.condition_text).value, condition.condition_pattern);\n    } else if (condition_type \u003d\u003d\u003d \"notcontains\") {\n        return !containsMatch(findObjectByKeyValue(VariableList, \"name\", condition.condition_text).value, condition.condition_pattern);\n    } else return true;\n}\n\n\nfunction istopconditionpass(condition, VariableList, withcode) {\n    var condition_tactic \u003d condition.many_condition_tactic || \"Any\";\n    var conditionlist \u003d condition.condition;\n    var condition_pass \u003d false;\n\n    if (condition_tactic \u003d\u003d\u003d \"All\") {\n        condition_pass \u003d conditionlist.every(function (cond) {\n            return isconditionpass(cond, withcode, VariableList);\n        });\n    } else if (condition_tactic \u003d\u003d\u003d \"Any\") {\n        condition_pass \u003d conditionlist.some(function (cond) {\n            return isconditionpass(cond, withcode, VariableList);\n        });\n    } else if (condition_tactic \u003d\u003d\u003d \"None\") {\n        condition_pass \u003d conditionlist.every(function (cond) {\n            return !isconditionpass(cond, withcode, VariableList);\n        });\n    } else {\n        showToast(\"规则错误：置顶条件未知的多条件策略\" + condition_tactic);\n    }\n\n    return condition_pass;\n}\n\n\nfunction chooseRules(object, VariableList, withcode) {\n    var max_condition_num \u003d 0;\n    var max_condition_index \u003d 0;\n    var ruleobjectlist \u003d object.rule;\n\n    for (var i \u003d 0; i \u003c ruleobjectlist.length; i++) {\n        var conditionlist \u003d ruleobjectlist[i].condition;\n        if (!conditionlist || conditionlist.length \u003d\u003d\u003d 0) {\n            if (max_condition_num \u003d\u003d\u003d 0) {\n                max_condition_index \u003d i;\n            }\n            continue;\n        }\n        var condition_tactic \u003d ruleobjectlist[i].many_condition_tactic || \"All\";\n        var condition_pass \u003d false;\n\n        if (condition_tactic \u003d\u003d\u003d \"All\") {\n            condition_pass \u003d conditionlist.every(function (cond) {\n                return isconditionpass(cond, withcode, VariableList);\n            });\n        } else if (condition_tactic \u003d\u003d\u003d \"Any\") {\n            condition_pass \u003d conditionlist.some(function (cond) {\n                return isconditionpass(cond, withcode, VariableList);\n            });\n        } else if (condition_tactic \u003d\u003d\u003d \"None\") {\n            condition_pass \u003d conditionlist.every(function (cond) {\n                return !isconditionpass(cond, withcode, VariableList);\n            });\n        } else {\n            showToast(\"规则错误：\" + object.name + \"规则，未知的多条件策略\" + condition_tactic);\n            continue;\n        }\n\n        if (condition_pass \u0026\u0026 conditionlist.length \u003e max_condition_num) {\n            max_condition_num \u003d conditionlist.length;\n            max_condition_index \u003d i;\n        }\n    }\n\n    var ruletext \u003d ruleobjectlist[max_condition_index].rule_text;\n    var output \u003d SynthesisRule(getVariablevalues(ruletext, VariableList, object), ruletext);\n    var codeobject \u003d findObjectByKeyValue(VariableList, \"name\", \"code\");\n    if (withcode \u0026\u0026 codeobject.count \u003d\u003d\u003d 0) copy \u003d codeobject.value;\n    return output;\n\n}\n\n\nfunction matchRules(linkall, isnolink) {\n    var link, ExtractionCode, RULES, withExtractionCode;\n    if (!isnolink) {\n        var linkparts \u003d linkall.split(\" 提取码:\");\n        link \u003d String(linkparts[0]);\n        if (linkparts.length \u003d\u003d\u003d 2) {\n            ExtractionCode \u003d linkparts[1];\n        }\n        RULES \u003d readJsonFile(ShortX_Path + \"/data/Fluid_Cloud/rules.json\");\n        withExtractionCode \u003d true;\n    } else {\n        link \u003d linkall;\n        RULES \u003d readJsonFile(ShortX_Path + \"/data/Fluid_Cloud/nolinkrules.json\");\n        withExtractionCode \u003d false;\n    }\n\n    var results \u003d [];\n    for (var i \u003d 0; i \u003c RULES.length; i++) {\n        var addToFirst \u003d false;\n\n        if (islistinstr(link, RULES[i].tigger)) {\n            var VariableList \u003d [\n                { name: \"input\", value: input, count: 0 }\n            ];\n            if ([\"url\", \"intent\"].includes(RULES[i].type)) {\n                var OpenApps \u003d pkgCheck(RULES[i].check);\n                if (!OpenApps.pass) continue;\n                if (!isnolink) {\n                    VariableList.push({ name: \"link\", value: link });\n                    if (typeof ExtractionCode !\u003d\u003d \"undefined\" \u0026\u0026 ExtractionCode !\u003d\u003d null) {\n                        VariableList.push({ name: \"code\", value: ExtractionCode, count: 0 });\n                    } else {\n                        withExtractionCode \u003d false;\n                        VariableList.push({ name: \"code\", value: \"\", count: 0 });\n                        var ExtractionCode \u003d \"\";\n                    }\n                }\n\n                var copy \u003d \"\";\n                var output \u003d chooseRules(RULES[i], VariableList, withExtractionCode);\n                if (typeof RULES[i].topcondition \u003d\u003d\u003d \"object\") {\n                    if (istopconditionpass(RULES[i].topcondition, VariableList, withExtractionCode)) {\n                        addToFirst \u003d true;\n                    }\n                }\n\n                var urlpkgn \u003d OpenApps.result;\n                if (addToFirst) urlpkgn.reverse();\n\n                for (var k \u003d 0; k \u003c urlpkgn.length; k++) {\n                    if (!isKeyPairInOblist(results, \"pkg\", urlpkgn[k].packageName, \"UserId\", urlpkgn[k].UserId)) {\n                        var titletext \u003d SynthesisRule(getVariablevalues(RULES[i].title, VariableList, RULES[i]), RULES[i].title);\n                        var messagetext \u003d SynthesisRule(getVariablevalues(RULES[i].message, VariableList, RULES[i]), RULES[i].message);\n\n                        if (!addToFirst) {\n                            results.push({\n                                type: RULES[i].type,\n                                pkg: urlpkgn[k].packageName,\n                                urlsharme: output,\n                                activity: null,\n                                copy: copy,\n                                title: titletext,\n                                message: messagetext,\n                                UserId: urlpkgn[k].UserId,\n                                icon: RULES[i].icon,\n                            });\n                        } else {\n                            results.unshift({\n                                type: RULES[i].type,\n                                pkg: urlpkgn[k].packageName,\n                                urlsharme: output,\n                                activity: null,\n                                copy: copy,\n                                title: titletext,\n                                message: messagetext,\n                                UserId: urlpkgn[k].UserId,\n                                icon: RULES[i].icon,\n                            });\n                        }\n                    }\n                }\n            } else if (!isnolink \u0026\u0026 RULES[i].type \u003d\u003d\u003d \"pkg\") {\n                var OpenApps \u003d pkgCheck(RULES[i].pkg);\n                var packageName \u003d OpenApps.result;\n                if (!OpenApps.pass) continue;\n\n                if (addToFirst) packageName.reverse();\n                for (var k \u003d 0; k \u003c OpenApps.result.length; k++) {\n                    var activityname \u003d null;\n                    if (RULES[i].pkg.includes(\"://\")) {\n                        activityname \u003d getAppOpenActivities(RULES[i].pkg, packageName[k].packageName, packageName[k].UserId);\n                    } else if (RULES[i].activityname !\u003d\u003d undefined \u0026\u0026 RULES[i].activityname !\u003d\u003d null) {\n                        activityname \u003d RULES[i].activityname;\n                    }\n\n                    if (!isKeyPairInOblist(results, \"pkg\", packageName[k].packageName, \"UserId\", packageName[k].UserId)) {\n                        if (!addToFirst) {\n                            results.push({\n                                type: \"pkg\",\n                                link: link,\n                                pkg: packageName[k].packageName,\n                                activity: activityname,\n                                copy: ExtractionCode,\n                                UserId: packageName[k].UserId,\n                            });\n                        } else {\n                            results.unshift({\n                                type: \"pkg\",\n                                link: link,\n                                pkg: packageName[k].packageName,\n                                activity: activityname,\n                                copy: ExtractionCode,\n                                UserId: packageName[k].UserId,\n                            });\n                        }\n                    }\n                }\n            } else if (isnolink \u0026\u0026 RULES[i].type \u003d\u003d \"rein\") {\n                var text \u003d RecognitionMain(chooseRules(RULES[i], VariableList, false));\n                if (text.length \u003e 0) {\n                    OpenMain(text, true);\n                } else {\n                    nolinkMain(text, true);\n                }\n                return \"rein\";\n            }\n\n            else {\n                throw new Error(\"规则错误，未知的type：\" + RULES[i].type);\n            }\n        }\n    }\n\n    if (!isnolink) {\n        var AdaptiveAPP \u003d pkgCheck(link);\n        if (AdaptiveAPP.pass) {\n            for (var i \u003d 0; i \u003c AdaptiveAPP.result.length; i++) {\n                if (\n                    !isKeyPairInOblist(results, \"pkg\", AdaptiveAPP.result[i].packageName, \"UserId\", AdaptiveAPP.result[i].UserId) \u0026\u0026\n                    !Browser_PackageName_BlackList.includes(AdaptiveAPP.result[i].packageName)\n                ) {\n                    results.push({\n                        type: \"pkg\",\n                        link: link,\n                        pkg: AdaptiveAPP.result[i].packageName,\n                        activity: null,\n                        copy: ExtractionCode,\n                        UserId: AdaptiveAPP.result[i].UserId,\n                    });\n                }\n            }\n        }\n\n        if (!isKeyInOblist(results, \"pkg\", defaultBrowser)) {\n            results.push({\n                type: \"pkg\",\n                link: link,\n                pkg: defaultBrowser,\n                activity: null,\n                copy: ExtractionCode,\n                UserId: 0,\n            });\n        }\n    }\n\n    return results.length !\u003d\u003d 0 ? results : false;\n}\n\n\n\n\nfunction launchWithMode(launchType, input, config, freeformMode, mode, packageName, activityName, userId) {\n    try {\n        var intent;\n        if (launchType \u003d\u003d\u003d \"intent\") {\n            intent \u003d Intent.parseUri(input, 0);\n        } else {\n            intent \u003d new Intent(Intent.ACTION_VIEW);\n            intent.setData(Uri.parse(input));\n        }\n\n        if (packageName !\u003d\u003d null \u0026\u0026 packageName.trim() !\u003d\u003d \"\") {\n            intent.setPackage(packageName);\n            if (activityName \u0026\u0026 activityName.trim() !\u003d\u003d \"\") {\n                intent.setClassName(packageName, activityName);\n            }\n        }\n\n        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_REORDER_TO_FRONT);\n        var userHandle \u003d (userId !\u003d null \u0026\u0026 typeof userId \u003d\u003d\u003d \"number\")\n            ? android.os.UserHandle.of(userId)\n            : android.os.UserHandle.of(0);\n\n        if (mode \u003d\u003d\u003d \"fullscreen\") {\n            var pm \u003d context.getPackageManager();\n            var cmp \u003d intent.resolveActivity(pm);\n            if (cmp \u003d\u003d null) {\n                throw new Error(\"全屏启动失败：Intent 无法解析到任何 Activity\");\n            }\n            context.startActivityAsUser(intent, null, userHandle);\n            return \"已全屏启动：\" + (launchType \u003d\u003d\u003d \"intent\" ? \"Intent URI\" : input);\n        }\n\n        var useMode \u003d isAppinstall(\"oplus\", 0) ? 100 : freeformMode;\n        var wm \u003d context.getSystemService(\"window\");\n        var display \u003d wm.getDefaultDisplay();\n        var point \u003d new Point();\n        display.getRealSize(point);\n        var rotation \u003d display.getRotation();\n        var isPortrait \u003d (rotation \u003d\u003d\u003d Surface.ROTATION_0 || rotation \u003d\u003d\u003d Surface.ROTATION_180);\n        var width \u003d isPortrait ? parseInt(config[0]) : parseInt(config[1]);\n        var height \u003d parseInt(width / parseFloat(config[2]));\n        var left \u003d isPortrait ? parseInt(config[3]) : parseInt(config[4]);\n        var top \u003d isPortrait ? parseInt(config[5]) : parseInt(config[6]);\n        var right \u003d left + width;\n        var bottom \u003d top + height;\n\n        var options \u003d ActivityOptions.makeBasic();\n        options.setLaunchWindowingMode(useMode);\n        options.setLaunchBounds(new Rect(left, top, right, bottom));\n\n        if (launchType \u003d\u003d\u003d \"intent\") {\n            context.startActivityAsUser(intent, options.toBundle(), userHandle);\n        } else {\n            context.startActivity(intent, options.toBundle());\n        }\n\n        return \"已小窗启动：\" + (launchType \u003d\u003d\u003d \"intent\" ? \"Intent URI\" : input);\n    } catch (e) {\n        if (e.message \u0026\u0026 e.message.indexOf(\"No Activity found\") !\u003d\u003d -1) {\n            throw new Error(\"在目标应用中未找到可以打开链接的活动\");\n        } else {\n            throw e;\n        }\n    }\n}\n\n\nfunction CopyText(text) {\n    var action \u003d WriteClipboard.newBuilder()\n        .setText(text)\n        .build();\n    shortx.executeAction(action);\n}\nfunction Recognizeagain() {\n    var ModeA \u003d \"常规识别模式\";\n    var ModeB \u003d \"加料的复杂单链接(需确保链接前后无允许字符干扰)\";\n    var ModeC \u003d \"未加料的含有非法字符的链接(如中文域名)\";\n    var ModeD \u003d \"强制使用无链接模式\";\n    var Recognition_Mode \u003d showOptionsDialog([ModeA, ModeB, ModeC, ModeD, \"取消\"], \"识别模式\");\n\n    if (Recognition_Mode \u003d\u003d ModeA) {\n        var text \u003d RecognitionMain(input);\n        if (text.length \u003e 0) {\n            OpenMain(text, false);\n        } else {\n            nolinkMain(input, false);\n        }\n    } else if (Recognition_Mode \u003d\u003d ModeB) {\n        var text \u003d AddRequestHead(ScreeningParagraphs(removeDisallowedChar(input, allowChar + \"\\\\n\")));\n        if (text.length \u003e 0) {\n            OpenMain(text, false);\n        } else {\n            nolinkMain(input, false);\n        }\n    } else if (Recognition_Mode \u003d\u003d ModeC) {\n        var text \u003d AddRequestHead(ScreeningParagraphs(input));\n        if (text.length \u003e 0) {\n            OpenMain(text, false);\n        } else {\n            nolinkMain(input, false);\n        }\n    } else if (Recognition_Mode \u003d\u003d ModeD) {\n        nolinkMain(input, false);\n    }\n}\nfunction nolinkMain(input, showfloat) {\n    var Open_With_List \u003d matchRules(input, true);\n\n    if (Open_With_List \u003d\u003d \"rein\" || Open_With_List \u003d\u003d false || isKeyInOblist(Open_With_List, \"pkg\", getForegroundAppPackageName())) {\n        return 1;\n    }\n    var DialogBoxOption \u003d [];\n    for (var i \u003d 0; i \u003c Open_With_List.length; i++) {\n        if (typeof Open_With_List[i].icon \u003d\u003d\u003d \"string\") {\n            var icon \u003d Open_With_List[i].icon;\n        } else {\n            var icon \u003d Open_With_List[i].pkg;\n        }\n        DialogBoxOption.push({\n            label: Open_With_List[i].title + \"(全屏)\",\n            desc: Open_With_List[i].message,\n            pkg: icon,\n            userId: Open_With_List[i].UserId,\n            value: [\"fullscreen\", Open_With_List[i]]\n        });\n        DialogBoxOption.push({\n            label: Open_With_List[i].title + \"(小窗)\",\n            desc: Open_With_List[i].message,\n            pkg: icon,\n            userId: Open_With_List[i].UserId,\n            value: [\"window\", Open_With_List[i]]\n        });\n    }\n    DialogBoxOption.push({ label: \"重新识别\", desc: \"使用其他识别模式重新识别\", icon: \"⤴️\", value: \"重新识别\" });\n    DialogBoxOption.push({ label: \"取消\", desc: \"关闭指令窗口\", icon: \"❌\", value: \"取消\" });\n\n    var Fluid_Cloud_Message;\n    if (typeof Open_With_List[0].icon \u003d\u003d\u003d \"string\") {\n        var icon \u003d Open_With_List[0].icon;\n    } else {\n        var icon \u003d Open_With_List[0].pkg;\n    }\n    if (Fluid_Cloud_Position \u003d\u003d \"顶部\") {\n        Fluid_Cloud_Message \u003d {\n            pkg: icon,\n            userId: Open_With_List[0].UserId,\n            title: Open_With_List[0].title,\n            subtitle: Open_With_List[0].message,\n            buttonText: \"浮窗打开\",\n            resultOnClick: \"fullscreen\",\n            resultOnButton: \"window\",\n            resultOnTimeout: \"取消\",\n            resultOnSwipe: \"取消\",\n            resultOnSwipeDown: \"choose\",\n            timeout: Fluid_Cloud_timeout,\n            gravity: Gravity.TOP | Gravity.CENTER,\n            x: 0,\n            y: Fluid_Cloud_Position_Offset\n        };\n    } else {\n        Fluid_Cloud_Message \u003d {\n            pkg: icon,\n            userId: Open_With_List[0].UserId,\n            title: Open_With_List[0].title,\n            subtitle: Open_With_List[0].message,\n            buttonText: \"浮窗打开\",\n            resultOnClick: \"fullscreen\",\n            resultOnButton: \"window\",\n            resultOnTimeout: \"取消\",\n            resultOnSwipe: \"choose\",\n            resultOnSwipeDown: \"取消\",\n            timeout: Fluid_Cloud_timeout,\n            gravity: Gravity.BOTTOM | Gravity.CENTER,\n            x: 0,\n            y: Fluid_Cloud_Position_Offset\n        };\n    }\n    var openWith;\n    var Fluid_Cloud_choose_result \u003d !showfloat ? \"choose\" : showFloatingPrompt(Fluid_Cloud_Message);\n    if (Fluid_Cloud_choose_result \u003d\u003d\u003d \"choose\") {\n        var DialogBoxResult \u003d showOptionsDialog(DialogBoxOption, \"打开方式(可滚动)\");\n        if (![\"取消\", \"重新识别\"].includes(DialogBoxResult)) {\n            openWith \u003d DialogBoxResult[1];\n            openWith.openact \u003d DialogBoxResult[0];\n        } else {\n            if (DialogBoxResult \u003d\u003d \"取消\") {\n                return 1;\n            } else if (DialogBoxResult \u003d\u003d \"重新识别\") {\n                Recognizeagain();\n                return 1;\n            }\n        }\n    } else if ([\"fullscreen\", \"window\"].includes(Fluid_Cloud_choose_result)) {\n        openWith \u003d Open_With_List[0];\n        openWith.openact \u003d Fluid_Cloud_choose_result;\n    } else {\n        return 1;\n    }\n\n    if ([\"url\", \"intent\"].includes(openWith.type)) {\n        launchWithMode(openWith.type, openWith.urlsharme, Window_Configuration, Launch_Windowing_Mode, openWith.openact, openWith.pkg, openWith.activity, openWith.UserId);\n    } else {\n        throw new Error(\"未知的type：\" + openWith.type);\n    }\n}\n\nfunction OpenMain(AllLinks, showfloat) {\n\n    if (AllLinks.length \u003d\u003d\u003d 0) {\n        return 1;\n    }\n\n    var link;\n    var linkNum \u003d AllLinks.length;\n    var manylink \u003d linkNum \u003e\u003d 2;\n\n    if (manylink) {\n        var ManyLink_Fluid_Cloud;\n        if (Fluid_Cloud_Position \u003d\u003d \"顶部\") {\n            ManyLink_Fluid_Cloud \u003d {\n                pkg: defaultBrowser,\n                userId: 0,\n                title: \"多个链接\",\n                subtitle: \"点击选择链接\",\n                buttonText: \"重新识别\",\n                resultOnClick: true,\n                resultOnButton: \"重新识别\",\n                resultOnTimeout: false,\n                resultOnSwipe: false,\n                resultOnSwipeDown: true,\n                timeout: Fluid_Cloud_timeout,\n                gravity: Gravity.TOP | Gravity.CENTER,\n                x: 0,\n                y: Fluid_Cloud_Position_Offset\n            };\n        } else {\n            ManyLink_Fluid_Cloud \u003d {\n                pkg: defaultBrowser,\n                userId: 0,\n                title: \"多个链接\",\n                subtitle: \"点击选择链接\",\n                buttonText: \"重新识别\",\n                resultOnClick: true,\n                resultOnButton: \"重新识别\",\n                resultOnTimeout: false,\n                resultOnSwipe: true,\n                resultOnSwipeDown: false,\n                timeout: Fluid_Cloud_timeout,\n                gravity: Gravity.BOTTOM | Gravity.CENTER,\n                x: 0,\n                y: Fluid_Cloud_Position_Offset\n            };\n        }\n\n        var openWith;\n        var goManyLinkChoose \u003d !showfloat ? true : showFloatingPrompt(ManyLink_Fluid_Cloud);\n\n        if (goManyLinkChoose \u003d\u003d true) {\n            AllLinks.push(\"取消\");\n            AllLinks.push(\"重新识别\");\n            link \u003d String(showOptionsDialog(AllLinks, \"选择链接\"));\n        } else if (goManyLinkChoose \u003d\u003d \"重新识别\") {\n            Recognizeagain();\n            return 1;\n        } else {\n            return 1;\n        }\n    } else {\n        link \u003d String(AllLinks[0]);\n    }\n\n    if (link \u003d\u003d \"取消\") {\n        return 1;\n    } else if (link \u003d\u003d \"重新识别\") {\n        Recognizeagain();\n        return 1;\n    }\n\n    var Open_With_List \u003d matchRules(link, false);\n    if (!manylink \u0026\u0026 (Open_With_List.length \u003c 2 || getForegroundAppPackageName() !\u003d defaultBrowser) \u0026\u0026\n        isKeyInOblist(Open_With_List, \"pkg\", getForegroundAppPackageName())) {\n        return 1;\n    }\n    if(Open_With_List.length\u003c2\u0026\u0026[\"QQ\",\"微信\"].includes(tiggerTag)) return 1;\n\n    var DialogBoxOption \u003d [];\n    for (var i \u003d 0; i \u003c Open_With_List.length; i++) {\n        DialogBoxOption.push({\n            label: getAppName(Open_With_List[i].pkg, Open_With_List[i].UserId),\n            desc: \"全屏\",\n            pkg: Open_With_List[i].pkg,\n            userId: Open_With_List[i].UserId,\n            value: [\"fullscreen\", Open_With_List[i]]\n        });\n        DialogBoxOption.push({\n            label: getAppName(Open_With_List[i].pkg, Open_With_List[i].UserId),\n            desc: \"小窗\",\n            pkg: Open_With_List[i].pkg,\n            userId: Open_With_List[i].UserId,\n            value: [\"window\", Open_With_List[i]]\n        });\n    }\n    DialogBoxOption.push({ label: \"选择应用打开\", desc: \"全屏\", icon: \"📱\", value: \"选择应用打开\" });\n    DialogBoxOption.push({ label: \"复制链接\", desc: \"复制清理干净的链接和提取码\", icon: \"📋\", value: \"复制链接\" });\n    DialogBoxOption.push({ label: \"重新识别\", desc: \"使用其他识别模式重新识别\", icon: \"⤴️\", value: \"重新识别\" });\n    DialogBoxOption.push({ label: \"取消\", desc: \"关闭指令窗口\", icon: \"❌\", value: \"取消\" });\n\n    var Fluid_Cloud_Message;\n    if (Fluid_Cloud_Position \u003d\u003d \"顶部\") {\n        Fluid_Cloud_Message \u003d {\n            pkg: Open_With_List[0].pkg,\n            userId: Open_With_List[0].UserId,\n            title: \"打开\" + getAppName(Open_With_List[0].pkg, 0),\n            subtitle: \"点击全屏打开\" + getAppName(Open_With_List[0].pkg, 0),\n            buttonText: \"浮窗打开\",\n            resultOnClick: \"fullscreen\",\n            resultOnButton: \"window\",\n            resultOnTimeout: \"取消\",\n            resultOnSwipe: \"取消\",\n            resultOnSwipeDown: \"choose\",\n            timeout: Fluid_Cloud_timeout,\n            gravity: Gravity.TOP | Gravity.CENTER,\n            x: 0,\n            y: Fluid_Cloud_Position_Offset\n        };\n    } else {\n        Fluid_Cloud_Message \u003d {\n            pkg: Open_With_List[0].pkg,\n            userId: Open_With_List[0].UserId,\n            title: \"打开\" + getAppName(Open_With_List[0].pkg, 0),\n            subtitle: \"点击全屏打开\" + getAppName(Open_With_List[0].pkg, 0),\n            buttonText: \"浮窗打开\",\n            resultOnClick: \"fullscreen\",\n            resultOnButton: \"window\",\n            resultOnTimeout: \"取消\",\n            resultOnSwipe: \"choose\",\n            resultOnSwipeDown: \"取消\",\n            timeout: Fluid_Cloud_timeout,\n            gravity: Gravity.BOTTOM | Gravity.CENTER,\n            x: 0,\n            y: Fluid_Cloud_Position_Offset\n        };\n    }\n\n    var openWith;\n    var Fluid_Cloud_choose_result \u003d (manylink || !showfloat) ? \"choose\" : showFloatingPrompt(Fluid_Cloud_Message);\n\n    if (Fluid_Cloud_choose_result \u003d\u003d\u003d \"choose\" \u0026\u0026 (tiggerTag !\u003d \"附加\" || (tiggerTag \u003d\u003d \"附加\" \u0026\u0026 extra_default_action \u003d\u003d \"询问\"))) {\n        var DialogBoxResult \u003d showOptionsDialog(DialogBoxOption, \"打开方式(可滚动)\");\n        if (![\"取消\", \"复制链接\", \"选择应用打开\", \"重新识别\"].includes(DialogBoxResult)) {\n            openWith \u003d DialogBoxResult[1];\n            openWith.openact \u003d DialogBoxResult[0];\n        } else {\n            if (DialogBoxResult \u003d\u003d \"取消\") {\n                return 1;\n            } else if (DialogBoxResult \u003d\u003d \"重新识别\") {\n                Recognizeagain();\n                return 1;\n            }\n\n            var clink \u003d link.split(\" 提取码:\");\n            if (clink[1] !\u003d\u003d undefined) {\n                CopyText(clink[1]);\n                showToast(\"提取码已复制\");\n            }\n\n            var runIns \u003d clink[0];\n            if (DialogBoxResult \u003d\u003d \"复制链接\") {\n                RecordCopiedText(runIns);\n                CopyText(runIns);\n                showToast(\"链接已复制\");\n                return 1;\n            } else if (DialogBoxResult \u003d\u003d \"选择应用打开\") {\n                var command \u003d ShellCommand.newBuilder()\n                    .setCommand(\"am start -d \\\\\"\" + runIns + \"\\\\\"\").build();\n                shortx.executeAction(command);\n                return 1;\n            } else {\n                return 1;\n            }\n        }\n    } else if (tiggerTag \u003d\u003d \"附加\" \u0026\u0026 extra_default_action !\u003d \"询问\") {\n        if (extra_default_action \u003d\u003d \"全屏打开\") {\n            openWith \u003d Open_With_List[0];\n            openWith.openact \u003d \"fullscreen\";\n        }else if (extra_default_action \u003d\u003d \"小窗打开\") {\n            openWith \u003d Open_With_List[0];\n            openWith.openact \u003d \"window\";\n        }\n    } else if ([\"fullscreen\", \"window\"].includes(Fluid_Cloud_choose_result)) {\n        openWith \u003d Open_With_List[0];\n        openWith.openact \u003d Fluid_Cloud_choose_result;\n    } else {\n        return 1;\n    }\n\n    if (openWith.copy !\u003d \"\" \u0026\u0026 openWith.copy !\u003d\u003d undefined) {\n        CopyText(openWith.copy);\n        showToast(\"提取码已复制\");\n    }\n\n    if ([\"url\", \"intent\"].includes(openWith.type)) {\n        launchWithMode(openWith.type, openWith.urlsharme, Window_Configuration, Launch_Windowing_Mode, openWith.openact, openWith.pkg, openWith.activity, openWith.UserId);\n    } else if (openWith.type \u003d\u003d \"pkg\") {\n        launchWithMode(\"intent\", openWith.link, Window_Configuration, Launch_Windowing_Mode, openWith.openact, openWith.pkg, openWith.activity, openWith.UserId);\n    } else {\n        throw new Error(\"未知的type：\" + openWith.type);\n    }\n}\n\n\n\nif (DebugMode \u003d\u003d false \u0026\u0026 isRunAction \u003d\u003d true) {\n    var setaction \u003d showOptionsDialog([\"设置指令\", \"编辑规则\", \"编辑无链接规则\", \"取消\"], \"选择操作\");\n    if (setaction \u003d\u003d \"设置指令\") {\n        showsettingsui();\n    } else if (setaction \u003d\u003d \"编辑规则\") {\n        showFileEditorUI(ShortX_Path + \"/data/Fluid_Cloud/rules.json\");\n    } else if (setaction \u003d\u003d \"编辑无链接规则\") {\n        showFileEditorUI(ShortX_Path + \"/data/Fluid_Cloud/nolinkrules.json\");\n    }\n} else {\n    var showFloatingPrompts;\n    if (DebugMode) {\n        showFloatingPrompts \u003d true;\n    } else {\n        showFloatingPrompts \u003d [\"选中\", \"附加\"].includes(tiggerTag) ? false : true;\n    }\n\n    var config \u003d readJsonFile(ShortX_Path + \"/data/Fluid_Cloud/config.json\");\n    var Top_Level_Domain \u003d config.Top_Level_Domain;\n    var Email_Keyword_List \u003d config.Email_Keyword_List;\n    var link_blacklist_keywords \u003d config.link_blacklist_keywords;\n    var Fluid_Cloud_Position \u003d config.Fluid_Cloud_Position;\n    var Fluid_Cloud_Position_Offset \u003d config.Fluid_Cloud_Position_Offset;\n    var Use_https_keyword_list \u003d config.Use_https_keyword_list;\n    var Extractioncode_Keyword_list \u003d config.Extractioncode_Keyword_list;\n    var Window_Configuration \u003d config.Window_Configuration;\n    var Launch_Windowing_Mode \u003d config.Launch_Windowing_Mode;\n    var Fluid_Cloud_timeout \u003d config.Fluid_Cloud_timeout;\n    var defaultBrowser \u003d config.browser;\n    var allowChar \u003d config.allowChar;\n    var Browser_PackageName_BlackList \u003d config.Browser_PackageName_BlackList;\n    var show_Multiple_users \u003d config.show_Multiple_users;\n    var show_toast \u003d config.show_toast;\n    var extra_default_action \u003d config.extra_default_action;\n    var UserIds \u003d getAllUserIds();\n    Browser_PackageName_BlackList.push(\"android\");\n    Browser_PackageName_BlackList.push(\"com.nyehueh.fluidcloud\");\n\n    var CopiedText \u003d readJsonFile(ShortX_Path + \"/data/Fluid_Cloud/recordcopy.json\").CopiedText;\n\n    if (defaultBrowser \u003d\u003d \"自动\" || isAppinstall(defaultBrowser, 0) \u003d\u003d false) {\n        defaultBrowser \u003d getDefaultBrowserPackageName(context);\n    }\n\n    var RealDefaultBrowser \u003d getDefaultBrowserPackageName(context);\n    var LinkIdentified \u003d RecognitionMain(input);\n\n    if (CopiedText !\u003d false \u0026\u0026 LinkIdentified.length \u003d\u003d 1 \u0026\u0026 LinkIdentified[0] \u003d\u003d CopiedText) {\n        RecordCopiedText(false);\n    } else {\n        RecordCopiedText(false);\n        if (LinkIdentified.length \u003e 0) {\n            OpenMain(LinkIdentified, showFloatingPrompts);\n        }\n        else {\n            nolinkMain(input, showFloatingPrompts);\n        }\n    }\n}\n`);\n",
      "context": "CoroutineContext_UI",
      "customContextDataKey": {
      },
      "note": "倒计时对话框（使用说明）\n写入核心，初始化配置文件",
      "id": "A-0feb5e8c-96b5-4f32-a35b-ed94ae93745d"
    }, {
      "@type": "type.googleapis.com/IfThenElse",
      "If": [{
        "@type": "type.googleapis.com/MatchJS",
        "expression": "importClass(java.io.File);\nvar dir\u003d\"/data/data/com.nyehueh.fluidcloud\"\nvar file\u003dnew File(dir);\n!file.exists()",
        "customContextDataKey": {
        },
        "id": "C-637b2479-f19d-496e-ba3d-bf76222b48f9"
      }],
      "IfActions": [{
        "@type": "type.googleapis.com/ShowAlertDialog",
        "positive": "去安装",
        "onPositive": [{
          "@type": "type.googleapis.com/StartActivityIntentUri",
          "intentUri": "https://raw.githubusercontent.com/nyehueh/shortx-Fluid_Cloud/main/Fluid_Cloud(附加插件).apk",
          "customContextDataKey": {
          },
          "id": "A-3a91f79b-de8f-417e-8077-93521b33defd"
        }],
        "neutral": "我不需要",
        "title": "安装附加插件？",
        "message": "附加插件未安装，安装并设置为默认浏览器后可直接通过点击链接来使用指令进行链接分发",
        "cancelable": true,
        "style": {
          "fontScale": 1.0
        },
        "customContextDataKey": {
        },
        "id": "A-a1d58fe2-bd1f-4359-9e0f-72a7f3fee99b"
      }],
      "customContextDataKey": {
      },
      "id": "A-f53f2dbc-6c6e-436d-8e66-7ab8fabc99cb"
    }],
    "actionsOnDeleted": [{
      "@type": "type.googleapis.com/ExecuteJS",
      "expression": "importPackage(java.io);\nfunction findRandomDirWithPrefix(basePath, prefix) {\n    var File \u003d java.io.File;\n    var dir \u003d new File(basePath);\n    if (!dir.exists() || !dir.isDirectory()) {\n        return null;\n    }\n    var list \u003d dir.listFiles();\n    if (list \u003d\u003d null) {\n        return null;\n    }\n    var result \u003d null;\n    for (var i \u003d 0; i \u003c list.length; i++) {\n        var file \u003d list[i];\n        if (file.isDirectory() \u0026\u0026 file.getName().startsWith(prefix)) {\n            result \u003d file.getName();\n            break; \n        }\n    }\n    if(result!\u003d\u003dnull){\n    return basePath+result;\n    }else{\n    throw new Error(\"查找ShortX目录失败\")\n    }\n}\n\nvar shortxpath\u003dfindRandomDirWithPrefix(\"/data/system/\", \"shortx\");\n\n\nfunction deleteDir(path) {\n    var dir \u003d new File(path);\n    if (!dir.exists()) {\n        return false; \n    }\n    if (dir.isDirectory()) {\n        var files \u003d dir.listFiles();\n        if (files !\u003d null) {\n            for (var i \u003d 0; i \u003c files.length; i++) {\n                var f \u003d files[i];\n                if (f.isDirectory()) {\n                    deleteDir(f.getAbsolutePath()); \n                } else {\n                    if (!f.delete()) {\n                        console.log(\"无法删除文件: \" + f.getAbsolutePath());\n                    }\n                }\n            }\n        }\n    }\n    return dir.delete();\n}\n\n\nfunction checkFileForText(filePath, targetText) {\n    var br \u003d new BufferedReader(new FileReader(filePath));\n    var line;\n    var found \u003d false;\n    while ((line \u003d br.readLine()) !\u003d null) {\n        if (line.includes(targetText)) {\n            found \u003d true;\n            break; \n        }\n    }\n    br.close();\n    if (!found) {\n        deleteDir(shortxpath+\"/data/Fluid_Cloud\");\n    }\n}\n\n\ncheckFileForText(shortxpath+\"/data/u/0/data_store/rules.pb\", \"流体云组件\");",
      "customContextDataKey": {
      },
      "id": "A-8eb97b74-7f9e-4ccb-8536-62f72b2bbec2"
    }]
  },
  "quit": {
  },
  "versionCode": "1",
  "conflictPolicy": "ConflictStrategy_SkipNew",
  "ruleInstanceIdGenerator": {
    "@type": "type.googleapis.com/RuleInstanceIdGenerator_String",
    "insId": "{clipboardContent}{selectedText}"
  }
}
###------###
{"type":"rule"}